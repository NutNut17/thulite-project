1. Visual Studio Code vs Visual Studio

Visual Studio Code is more to a editor and Visual Studio is an IDE (Integrated Developement Environment). Visual Studio Code focus on
file editting and it was lighther. Visual Studio have compiler and set of feature ready for project and solving programming problems
and aimed to be the best IDE in the world it has a feature, IntelliSense which can debug source code and machine code automatically.
Visual Studio code also wide used on .NET project, it is about open source a software development framework and ecosystem designed and
supported by Microsoft to allow for easy desktop and web application engineering. It is mostly used for C/C++ on windows and API.API is
the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.

2. Compiler

Operating System (OS):

Linux: Derivated from UNIX and it is a free operating system, which has a huge community. It has great performance.
UNIX: A OS with very high performance made up of kernel(core) and shells(terminals) which can face multiple user.

GNU is a open source project that develope free software which can be used as OS or used in part with other OS. GNU has two main project,
GCC and G++. Let's assume main as client code name, file1 as header and implementation file name.

GCC: A compiler to compile C and C++ in Linux. This software works better in C.
-Can do linking object files of C only
G++: Apply GCC without change and has better feature for C++.
-Can do linking files and object files of C and C++

Steps from a source code to executable file:
$ cpp main.c > main.i   (Preprocessing by expanding macros)
$ gcc -Wall -s main.i   (Convert preprocessed source code to Assembly Language without creating object file)
$ as main.s -o main.o   (The assembler convert assembly language to machine code and generate an object file)
$ gcc main.o            (Link object file to C standard library and produces an executable file)

Steps to build objective file:
$ gcc - Wall -c main.c          (Compile source file to object file)
$ gcc main.o file1.o -o newfile (Linking two object file to create a executable file named newfile)

Steps to build executable file:
$ gcc -Wall main.c -o main              (Compile main.c to main.exe. The default output name is 'a.out')
$ gcc -Wall main.c file1.c -o newfile   (A executable file named newfile created and links main.c and file1.c)

-c: Compile ; -o: Output ; -Wall: Warning for errors

C++ derived from C and has OOP feature which makes the major of the differences. There are difference in the syntax of C and C++, the
same code in C and C++ might have different result. Hence, it's better to use GCC for C and G++ for C++. Althogh sometimes using other
compiler works but it will increase the risk of error in some cases. Currently C and C++ is being used widely but why they are used? C
is a very old programming language and it don't have OOP feature, however C still have advantages over other language. C is faster than
C++, the performance of C is better than C++ and somehow it is useful than C++ in embedded system(non-computing chip) and suitable for
trivial system. C++ is a OOP language, it is one of the fastest OOP language and provides wide functionality that the world need for OOP
world.

To work on C and C++ in Windows, some software have to be installed to Windows in order to run. As we know that GNU work on linux and it
could be used in part with other OS. To run C/C++ it's better to use GNU tool to run C/C++ since GNU has C/C++ compiler tool that runs
on linux. MYSY2 is a software developement for Windows that run UNIX codes on Window. Linux is derived from UNIX and applying the idea
of running C/C++ on Windows by using GNU and linux works. A MYSY2 or other software developement have to installed on Window to create,
compile and run C/C++. MYSY2 is based on mingw64 and cygwin. In my PC, mingw64 is used.

C and C++ can work with each other. Here's an example of linking files with combination and C and C++:

In file 'module.h'

#ifndef MODULE_H
#define MODULE_H
#ifdef __cplusplus  
// The C++ compiler will see this causing all declarations in the block to have C linkage
// C compiler won't see it (skipped by the preprocessor)
extern "C" {
#endif
int module_foo(int arg);
#ifdef __cplusplus
}
#endif
#endif

In file 'module.cpp'

#include "module.h"
#include <mycpplib> // example function library
int module_foo(int arg)
{// some C++ code using your C++ library}

In file 'main.c'

#include "module.h"

int main(void)
{int x = module_foo(42);}

Build the file in terminal like this:

gcc -c -omain.o main.c                      // Compile C source code into object files
g++ -c -omodule.o module.cpp                // Compile C++ source code into object files. The output name of the file is "module.o"
g++ -oprogram main.o module.o -lmycpplib    // Link them together, using the C++ library libmycpplib. The output name of the file is
											// "program.exe"

Running in Windows Command Prompt

We can execute commands on Windows Command Prompt to compile and execute files. First, we need to check the existance of compiler by
typing the command "gcc -v" or "g++ -v". Now, observe that the left side of the cursor shows the directory of the console pointing.
to navigate the command prompt, type the directory at which the file located at by typing "cd directory_name". In case a directory
have space in it's name, use ' or " to enclose the whole address or add \ in front of the space. To navigate the directory at anohter
disk, type the disk name with a colon. For example, switching from disk C to D: type "d:".

3. Setting up Environment for C/C++ in VS Code

In every directory (folders) which the source code lies on have to make a directory named .vscode. The .vscode directory contain the
instruction to build and run task (compile and run). Here, we have two ways to run the source code the default and manual. In the beginning,
a default build task have to be build. In the editor page, click 'Terminal' and choose 'Configure Default Build Task...' then choose
appropriate compiler to run tasks (gcc for C and g++ for C++).If the build task built sucessfully, a launch.json file will be created in
.vscode folder and look like this:
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "cppbuild",
			"label": "C/C++: g++.exe build active file",
			"command": "C:\\msys64\\mingw64\\bin\\g++.exe",
			"args": [
				"-fdiagnostics-color=always",
				"-g",
				"${file}",
				"-o",
				"${fileDirname}\\${fileBasenameNoExtension}.exe"
			],
			"options": {
				"cwd": "${fileDirname}"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"detail": "compiler: C:\\msys64\\mingw64\\bin\\g++.exe"
		}
	]
}
To compile the source code, press 'Terminal' then 'Run Build Task' to compile the source code. To run manually, in the editor page of the
specified source code, click 'Terminal' and choose 'Configure Tasks' then choose the compiler that you want to use. The tasks.json file
will be editted. To run the task, press 'Terminal' then 'Run Task' to compile the source code. Remember to change the tasks.json file back
to it's default form by deleting the whole file and re-create a tasks.json file by 'Configure Default Build Task...'. You can modify your
tasks.json to build multiple C++ files by using an argument like "${workspaceFolder}\\*.cpp" instead of ${file}. This will build all .cpp
files in your current folder. You can also modify the output filename by replacing "${fileDirname}\\${fileBasenameNoExtension}.exe" with a
hard-coded filename (for example "${workspaceFolder}\\myProgram.exe").

In the terminal, press + or crtl + shift + ` to create a terminal. Type 'dir' to see the files and folders in the current directory if the
source code have been compiled sucessfully. Type .\filename.exe to execute the file in terminal.

GBD (GNU Project Debugger)
To debug a program, a launch.json is needed to be created to instruct debugging. From the main menu, choose "Run" then 'Add Configuration...'
and then choose C++ (GDB/LLDB). You'll then see a dropdown for various predefined debugging configurations. Choose g++.exe build and debug
active file. If there exist a launch.json file, C++ (GDB/LLDB) can't be choosen again. After the debugger has been set, press F5 to run.
In the launch.json file, change the stopAtEntry value to true to cause the debugger to stop on the main method when you start debugging.
Press F9 in a line to add a breakpoint for convinient debugging.

4. Workspace and Project

A workspace, contains the contents of editor. A workspace can be saved in VS Code by clicking 'File' and 'Save Workspace As...'

A project is another environment to make and link multiple C/C++ files. It could compile header file, implementation file and client code
to object files and link them together. To do this, first install C/C++ Project Generator from the extension marketplace. Then open
command palette by ctrl + shift + p and choose 'Create C++ Project'. In the project workspace, put header file in include folder,
implementation file and client code in src folder and 'Run Build Task' or ctrl + shift + b to compile and link the files. The output
executable file will be in output folder. To execute that, run it in terminal using dir and .\.