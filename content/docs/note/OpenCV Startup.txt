Setup for Visual Studio https://youtu.be/unSce_GPwto?si=nmxXACzSwQfAcN7D

- Visual Studio 2022 Installed
- OpenCV for windows downloaded & installed under directory "C:/" https://opencv.org/releases/
- "C:\opencv\build\x64\vc16\bin" added to system environment variable path

1. Create empty C++ project
2. Create a C++ file named main.cpp with the code below

Assume the project name below is cvtest

#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
using namespace cv;

int main()
{
    cv::Mat img = cv::imread("C:\\MyFolder\\img.png");
    namedWindow("First OpenCV Application", WINDOW_AUTOSIZE);
    cv::imshow("First OpenCV Application", img);
    cv::moveWindow("First OpenCV Application", 0, 45);
    cv::waitKey(0);
    cv::destroyAllWindows();
    return 0;
}

3. Goto Project at the top navigation panel, then click on testcv properties
4. Depending on what you wanna do (release/debug) we will use release in this tutorial
5. Select release on configuration, and x64 platform at the top panel
6. At C/C++ > General > Additional Include Directory, put this C:\opencv\build\include
7. At Linker > General > Additional Include Directory, put this C:\opencv\build\x64\vc16\lib
8. At Linker > Input > Additional Dependencies, put opencv_world480.lib for release under the directory C:\opencv\build\x64\vc16\lib. Choose opencv_world480d.lib for debug
9. Build and run

--------------------------------------------------------------------------------------------------------------------------------

Setup for VS Code https://www.youtube.com/watch?v=aMXQshF7zdo&ab_channel=Mohamadhasan

- VS Code installed
- C/C++ Extension and CMake Extension installed in VS Code
- CMake installed under "C://Programs" and path to system environment variable (Windows x64 Installer) https://cmake.org/download/
- OpenCV for windows downloaded & installed under directory "C:/" https://opencv.org/releases/
- "C:\opencv\build\x64\vc16\bin" added to system environment variable path

1. Create a folder and create a file "CMakeLists.txt" and write the code below into the file

cmake_minimum_required(VERSION 3.10)

project(opencvtest)

set(OpenCV_DIR "C:\\opencv\\build")
find_package(OpenCV REQUIRED)

add_executable(${PROJECT_NAME} src/Main.cpp)

target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})

2. Create a folder named src and create a file inside named "Main.cpp" and write the code below into the file

#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
using namespace cv;

int main()
{
    cv::Mat img = cv::imread("C:\\MyFolder\\img.png");
    namedWindow("First OpenCV Application", WINDOW_AUTOSIZE);
    cv::imshow("First OpenCV Application", img);
    cv::moveWindow("First OpenCV Application", 0, 45);
    cv::waitKey(0);
    cv::destroyAllWindows();
    return 0;
}

3. Restart the folder
4. Choose the kit "Visual Studio Community 2022 Release - x86_amd64" at the wrench tool icon at the bottom panel and WAIT UNTIL PROGRAM IS FINISHED!
5. Run it by pressing the play button at the bottom

--------------------------------------------------------------------------------------------------------------------------------

Setup for OpenCV Python

- Python and pip installed

1. Run "pip install opencv-python" at a python intepreter, done

Example code

import cv2

imagepath = "C:\\MyFolder\\pepe.jpg"

img = cv2.imread(imagepath)
if img is None:
    print("Could not read the image")
else:
    cv2.namedWindow("Image", cv2.WINDOW_GUI_NORMAL)
    cv2.resizeWindow("Image", 512, 512)
    cv2.moveWindow("Image", 100, 100)
    cv2.imshow("Image", img)
    cv2.waitKey(0)
    cv2.destroyWindow("Image")


================================================================================================================================

Example code

#include <iostream>
#include <string>
using namespace std;

#include <opencv2/opencv.hpp>
using namespace cv;

String imagepath = "C:\\MyFolder\\pepe.jpg";

int main()
{
    Mat img = imread(imagepath);
    if (img.empty())
    {
        cout << "Could not read the image: " << endl;
        return 1;
    }
    namedWindow("Image", WINDOW_GUI_NORMAL);
    resizeWindow("Image", 512, 512);
    moveWindow("Image", 100, 100);
    imshow("Image", img);
    waitKey(0);
    destroyWindow("Image");
    return 0;
}
