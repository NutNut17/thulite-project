Arduino on VS Code

https://colddsam.medium.com/exploring-the-world-of-arduino-programming-in-visual-studio-code-bbcb4af982e7

1. Install arduino extension on vs code
2. Enable arduino CLI
3. Create a folder with ino file with the same name
4. Select serial code and arduino board
5. Upload: Ctrl + Alt + U, Verify: Ctrl + Alt + R

Features:

- Monitor multiple serial monitor on different ports
- Install library directly from library manager (Ctrl + Shift + P -> Arduino: Library Manager

-------------------------------------------------------------------------------------------------------------------------------
1. Basics

Digital Pin - Send signal of 1 or 0
Analog Pin - Send analog signal from 0 to 255

DIO - (Analog Pin) Data In Out. Input when L->H, Output when H->L. Reads from byte 0 to byte 7
CLK - (Digital Pin) Clock. Control DIO, reads DIO when L->H
STB - (Digital Pin) Strobe. Initialise DIO when low, and waits for commands. When high, ignores CLK
VCC - Logic Electric Source
GND - Ground

2. Common Functions

pinMode(pinCode, OUTPUT / INPUT);   // Setting a pin as input or output
digitalWrite(pinCode, HIGH / LOW);  // Write a pin
analogWrite(pinCode, value);        // Write analog signal
digitalRead(pinCode);               // Returns the input of the pin
delay(time);                        // Delay in ms
sendCommand(command);               // Do commands

Commands:

0x40 - Write data to DIO
0x42 - Read key data
0x88 - Open all 7-Seg Display
0x80 - Close all 7-Seg Display
0xc0 - First 7-Seg Display (+2 to the next 7-Seg Display)

NumberPattern[10] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f, 0x00}; // 0, 1, ... , 9, Empty

3. Bitwise Operations Tips

// Detect the P'th bit in X is 1 or 0
X = 01001101
M = 0x1;
B =  X & ( M <<  P);
if( B == 0 ) (is a 0);
else (is a 1);

// Set the P'th bit in X as 1 or 0
B = X & ~( M <<  P); // & for 0, | for 1

// Change the P'th bit in X from 0 to 1 or 1 to 0
B = X ^ ( M <<  P);

-------------------------------------------------------------------------------------------------------------------------------
// Example Code On 7-Seg Display

#define dataPin 6
#define clockPin 7
#define strobePin 8

byte current_segment;
byte pre_keys = 0x00;
byte pattern[10] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f };
// The first display location is 0xc0 and each increment of location is 2

void setup() {
  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(strobePin, OUTPUT);
  digitalWrite(strobePin, HIGH);
  digitalWrite(clockPin, HIGH);
  sendCommand(0x40);  // Write data to DIO
  sendCommand(0x88);  // Open 7-Seg

  digitalWrite(strobePin, LOW);
  send(0xc0);  // First 7-Seg Display
  send(0x3f);  // Write 0
  digitalWrite(strobePin, HIGH);
}

// This updates the segment by tapping the keys
void loop() {
  byte keys = getButton();
  if (keys != pre_keys) {
    pre_keys = keys;
    current_segment = (current_segment == 0 ? 1 : 0);  // Use this line to "tap to activate"
    // current_segment = keys;  // Use this line to "hold to activate"
    setSegNum(0xc0, pattern[current_segment]);
  }
}

void sendCommand(byte cmd) {
  digitalWrite(strobePin, LOW);
  send(cmd);
  digitalWrite(strobePin, HIGH);
}

void send(byte data) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
    digitalWrite(dataPin, data & 1 ? HIGH : LOW);
    data >>= 1;
    digitalWrite(clockPin, HIGH);
  }
}

// Function to set a number on 7-Seg
void setSegNum(byte seg_address, byte pattern) {
  digitalWrite(strobePin, LOW);
  send(seg_address);
  send(pattern);
  digitalWrite(strobePin, HIGH);
}

// Get input data
byte get_byte() {
  byte data = 0x00;
  pinMode(dataPin, INPUT);
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
    if (digitalRead(dataPin))
      data |= (0x01 << i);
    digitalWrite(clockPin, HIGH);
  }
  pinMode(dataPin, OUTPUT);
  return data;
}

// Read button
byte getButton() {
  byte keys = 0x00;
  digitalWrite(strobePin, LOW);
  send(0x42);  // Read key button
  for (int i = 0; i < 4; i++) {
    byte temp = get_byte();
    keys |= (temp << i);
  }
  digitalWrite(strobePin, HIGH);
  return keys;
}
-------------------------------------------------------------------------------------------------------------------------------
4. Audio Output

A Piezo buzzer buzz at a fixed frequency. When you use the tone function, it will tie up the timer
used for analogWrite on pins 3 and 11. Choose different pins if you need analog output. Pulse Width
Modulation (PWM), isÂ a technique for getting analog results with digital means. It was an IO.

tone(pin, frequency, duration(long data type, unit in ms)); // Play tone
noTone(); // Stop playing a tone

Example code for a song:

const int speakerPin = 9;
char noteNames[] = {'C', 'D', 'E', 'F', 'G', 'a', 'b'};
unsigned int = frequencies[] = {262, 294, 339, 349, 392, 440, 494};
const byte noteCount = sizeof(noteNames);

char score[] = "CCGGaaGFFEEDDC GGFFEEDGGFFEED CCGGaaGFFEEDDC ";
const byte scoreLen = sizeof(score); // Number of noted in the score

void setup() {}
void loop()
{
  for(int i = 0; i < scoreLen; i++)
  {
    inr duration = 333; // each note lasts for a third of second
    playNote(score[i], duration); // play the note
    delay(duration/10); // slightly pause to seperate the notes
  }
  delay(4000); // wait four seconds until the next song
}

void playNote(char note, int duration)
{
  // play tone corresponding to the note noteNames
  for(int i = 0; i < noteCount ; i++)
    if(noteNames[i] == note)
      tone(speakerPin, frequencies[i], duration); // Play the note  
  // if there is no match then the note is a rest
  delay(duration);
}

To add beats to the song add these variables

byte beats[scoreLen] = {....} // 1: 1/8, 2: 1/4, ...
byte beat = 180; // beat per minute for eight notes
unsigned int speed  = 60000 / beat; // time in ms for one beat

in the loop, do this: int duration = beats[i] * speed;

When you need to use analogWrite on pin 3 or 11. The pin will be blocked, that is the code will not
do anything else while the tone is played and it will not return until the tone has finished. In
case we want to produce analog output on different pin, we can refer the example code below to
produce an analog output to other pin than 3 and 11.

void playTone(int period, int duration)
{
  int pulse = period / 2;
  for(long i = 0; i < duration * 1000L ; i += period)
  {
    digitalWrite(speakerPin, HIGH);
    delayMicroseconds(pulse);
    digitalWrite(speakerPin, LOW);
    delayMicroseconds(pulse);
  }
}
-------------------------------------------------------------------------------------------------------------------------------
5. ILI9341 TFT - Thin Film Transistor Screen

- Color Display
- Uses SPI (Serial Peripheral Interface) interface protocol 
- Requires 4 or 5 control pins
- The resolution is 240 x 320, 76800 pixels
- Works with 3.3V only

TFT Pinout
1: VCC, 2: GND, 3: CS(Chip Select), 4: RST(Reset), 5: D/C(Data or Command), 6: MOSI(or SDI Serial
Data Input), 7: SCK(Clock), 8: BL(Back Light LED), 9: MISO(or SDO Serial Data Output)

Starting up with ILI9431

Firstly, connect the TFT Pin to the Arduino UNO pin as follows. Beware of the current and voltage.

TFT Pin ; TFT Name ; Arduino Pin ; Pin Type
1 ; VCC ; 3.3v 
2 ; GND ; GND
3 ; CS  ; 8   ; DIGITAL
4 ; RST ; 9   ; ANALOG
5 ; D/C ; 10  ; ANALOG
6 ; MOSI; 11  ; ANALOG
7 ; SCK ; 13  ; DIGITAL
8 ; BL  ; 3.3V

Then, based on pin connection above. Write the startup code as follows:

#define TFT_CS 8
#define TFT_DC 10
#define TFT_MOSI 11
#define TFT_CLK 13
#define TFT_RST 9
#define TFT_MISO 12

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST, TFT_MISO);

void setup() {
  Serial.begin(9600);
  Serial.println("ILI9341 Test!"); 
  tft.begin();
}
-------------------------------------------------------------------------------------------------------------------------------
6. Interrupt

Interrupt are a program that pause an execution that is running and do more important things then
after that return to where the execution pause and continues.

- A high priority interrupt can interrupt lower priority interrupt
- Serial data received while in the function may be lost
- millis () relies on interrupts to count, so it will never increment inside an ISR
- Since delay() requires interrupts to work, it will not work if called inside an ISR
- micros() works initially but will start behaving erratically after 1 2 ms
- delayMicroseconds () does not use any counter, so it will work as normal
- Typically global variables are used to pass data between an ISR and the main program
- Use volatile to make sure variables shared between an ISR and the main program are correct

attachInterrupt (digitalPinToInterrupt(pin), ISR, mode) // ISR: the name of ISR function, interrupt
can only be done on pin 2 and 3.

mode: defines when the interrupt should be triggered, the example is as follows
- LOW to trigger the interrupt whenever the pin is low
- CHANGE to trigger the interrupt whenever the pin changes value
- RISING to trigger when the pin goes from low to high
- FALLING for when the pin goes from high to low

Volatile variable - a variable declared volatile will update it's value after interrupt. For those
are not volatile, the value updated in interrupt will be return to it's value before interrupt.

const byte ledPin = 13;
const byte interruptPin 2;
volatile byte state = LOW; // Blink must be declared volatile to change value in ISR 
void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(interruptPin, INPUT_PULLUP);  // When pin2 changes it's value, ISR is called
  attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);
}
void loop() { digitalWrite(ledPin, state); }
void blink() { state = !state; }


7. Arduino Timer

Timer0: Pin 5, Pin 6
Timer1: Pin 9, Pin 10
Timer2: Pin 11, Pin 3

Timer ISR Modes
- compare match: when the timer value is equal to the compare value, it will trigger the interrupt
- overflow: an interruption is triggered each time the timer overflows
- input capture interrupt: the timer could store its value in a different register, each time an
external event happens on one of the Arduino pins

TCCRx: Timer/Counter Control Register, The prescaler can be configured here (TCCRXA /TCCRXB)X=0,1,2
TCNTx: Timer/Counter Register, The actual timer value is stored here
OCRx : Output Compare Register, When to have a time up (OCR1A/ OCR1B/ 2,3)
ICRx : Input Capture Register, only for 16bit timer
TIMSKx: Timer/Counter Interrupt Mask Register, to enable/disable timer interrupts
TIFRx: Timer/Counter Interrupt Flag Register, Indicates a pending timer interrupt

Timer 0, Timer 2: 8 bit, Timer 1: 16 bit
Main system clock: 16Mhz, 62.5ns each pulse
prescaler is used to divides the source clock by the selected amount

Setting the Prescaler

TCCR A and the TCCR B are the main control register. For timer1 we have TCCR 1A and TCCR 1B
TCCR A register is for controlling the PWM mode.

TCCR1A - Timer/Counter1 Control Resgister
Bit          7      6      5      4      3      2      1      0
(0x80)     COM1A1 COM1A0 COM1B1 COM1B0   -      -    WGM11  WGM10
Read/Write  R/W    R/W    R/W    R/W     R      R     R/W    R/W

TCCR1B - Timer/Control1 Control Register B
Bit          7      6      5      4      3      2      1      0
(0x81)     ICNC1  ICES1    -    WGM13  WGM12  CS12   CS11   CS10
Read/Write  R/W    R/W     R     R/W    R/W    R/W    R/W    R/W

CS12 CS11 CS10 Description
 0    0    0   No clock source (timer/counter stopped)
 0    0    1   clkio/1 (no prescaling)
 0    1    0   clkio/8 (prescaler)
 0    1    1   clkio/64 (prescaler)
 1    0    0   clkio/256 (prescaler)
 1    0    1   clkio1024 (prescaler)
 1    1    0   External clock source on T1 pin. Clock on falling edge
 1    1    1   External clock source on T1 pin. Clock on rising edge

For the timers 0 and 2 we have to use the TCCR0B and TCCR2B and bits
CS00, CS01, cS02 ands bits CS20, CS21 and CS22.

void setup() {
  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1B |= B00000100;  // Set CS12 to 1 so we get prescaler 256
  TCNT1 = 0;            // Reset timer 1 value to 0
}

Compare Match

To activate the compare match interruption we set the TIMSK register. setting the bits 2(OCIE1B)
and 1(OCIE1A), we can enable time compare interrupt on the value defined on compare registers OCRA
and OCRB. if we set OCR1A to be 2000, when timer 1 reaches 2000 it will create an interruption.
When TCNT1 == OCR1A invert the pulse and reset the TCNT1.

// 500ms blink code

System clock 16Mhz and prescaler 256
Calculation for 500ms:
Timer 1 speed = 16 Mhz / 256 = 62.5 Khz
Pulse time = 1 / 62.5 Khz = 16us
Count up to 500ms / 16 us = 31250 // Value of the OCR regsiter

bool LED_STATE = true;
void setup() {
  pinMode(13, OUTPUT);
  cli(); //clear interrupt
  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1B |= B00000010; // Prescaler or 256
  TIMSK1 |= B00000010; // Activate OCIE1A to enable OCR1A to be compare
  OCR1A = 31250;
  sei(); //set interupt
}
void loop(){}
ISR(TIMER1_COMPA_vect) // If TCNT1 == OCR1A, this ISR will be called
{
  TCNT1 = 0;
  LED_STATE = !LED_STATE;
  digitalWrite(13,LED_STATE);
}

6 ISR vector: These are used to trigger an ISR
TIMER1_COMPA_vect
TIMER1_COMPB_vect
TIMER2_COMPA_vect
TIMER2_COMPB_vect
TIMER3_COMPA_vect
TIMER3_COMPB_vect

map function

map(x, fromLow, fromHigh, toLow, toHigh);
maps x from a boundary to another boundary. Examples:
map(2, 1, 10, 10, 100) = 20
map(5, 1, 10, 10, 1) = 8

-------------------------------------------------------------------------------------------------------------------------------
7. Joystick

Here is an example of code implementing on Joystick. It shows the value of X and Y on the display.

#define JX A0  // JX: Joystick X
#define JY A1  // JY: Joystick Y
#define JB 4
#define dataPin 6
#define clockPin 7
#define strobePin 8

int VY, VX;  // VY: Value of Y, VX: Value of X
byte pattern[11] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f, 0x00 };

void setup() {
  pinMode(JX, INPUT);
  pinMode(JY, INPUT);

  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(strobePin, OUTPUT);
  pinMode(JB, INPUT);

  digitalWrite(strobePin, HIGH);
  digitalWrite(clockPin, HIGH);
  sendCommand(0x40);
  sendCommand(0x88);

  for (int i = 0; i < 8; i++)
    setSegNum(0xc0 + i * 2, pattern[10]);
}

void loop() {
  VY = analogRead(JY);
  setSegNum(0xc6, pattern[VY % 10]);
  VY /= 10;
  setSegNum(0xc4, pattern[VY % 10]);
  VY /= 10;
  setSegNum(0xc2, pattern[VY % 10]);
  VY /= 10;
  setSegNum(0xc0, pattern[VY % 10]);

  VX = analogRead(JX);
  setSegNum(0xce, pattern[VX % 10]);
  VX /= 10;
  setSegNum(0xcc, pattern[VX % 10]);
  VX /= 10;
  setSegNum(0xca, pattern[VX % 10]);
  VX /= 10;
  setSegNum(0xc8, pattern[VX % 10]);
// The button return 0 when it is pressed
  if (!digitalRead(JB)) {
    for (int i = 0; i < 8; i++)
      setSegNum(0xc0 + 2 * i, pattern[8]);
    delay(2000);
  }
  delay(200);
}

void setSegNum(byte seg_address, byte pattern) {
  digitalWrite(strobePin, LOW);
  send(seg_address);
  send(pattern);
  digitalWrite(strobePin, HIGH);
}

void sendCommand(byte cmd) {
  digitalWrite(strobePin, LOW);
  send(cmd);
  digitalWrite(strobePin, HIGH);
}

void send(byte data) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
    digitalWrite(dataPin, data & 1 ? HIGH : LOW);
    data >>= 1;
    digitalWrite(clockPin, HIGH);
  }
}

Interrupt Implement: Change the code above by adding these in the field of

Function
void runn()
{
    VX = 8888;
    VY = 8888;
}

Setup
attachInterrupt(digitalPinToInterrupt(JB), runn, LOW);

Loop
setSegNum(0xc6, pattern[VY % 10]);
setSegNum(0xc4, pattern[VY/10 % 10]);
setSegNum(0xc2, pattern[VY/100 % 10]);
setSegNum(0xc0, pattern[VY/1000 % 10]);
setSegNum(0xce, pattern[VX % 10]);
setSegNum(0xcc, pattern[VX/10 % 10]);
setSegNum(0xca, pattern[VX/100 % 10]);
setSegNum(0xc8, pattern[VX/1000 % 10]);
VX = analogRead(JX);
VY = analogRead(JY);
delay(200);

-------------------------------------------------------------------------------------------------------------------------------
8. Servo Motors

Servo Function Library: #include <Servo.h>. This library can control up to 12 servo

The signal of the servo pulse repeat every 20 ms and the width of the signal determines the angle
of current motor. Usually 1ms for 0 degree, 1.5ms for 90 degree and 2ms for 180 degree.

Servo sv; // Create an instance of Servo

sv.attach(pin);
sv.attach(pin, min, max); // min/max set the pulse width in microseconds corresonding with 0 deg
(defaults to 544) / 180 deg (defaults to 2400).

sv.write(angle); // Set the angle of shaft in degrees(0-180)

sv.writeMicroseconds();
sv.read();
sv.attached();
sv.detach();

-------------------------------------------------------------------------------------------------------------------------------
9. Serial Connection Between Two Boards

Step 1: Upload Master Code to First Board

//Sender Arduino Board Code (Master)
char mystring[15] = "LinuxHint.com "; //String data which is to be sent
void setup() {
Serial.begin(9600); // Begin the Serial at 9600 Baud rate
}
void loop() {
Serial.write(mystring,15); //Write the serial data
delay(1000);
}

Step 2: Upload Slave Code to the Second Board that is connected to another usb port on pinCode

//Receiver Arduino Board Code
char mystring[20]; //Initialized variable to store receive
void setup() {
Serial.begin(9600); // Begin the Serial at 9600 Baud
}
void loop() {
Serial.readBytes(mystring,15); //Read the serial data
Serial.println(mystring); //Print data on Serial Monitor
Serial.println(" RECEIVER");
delay(1000); 
}

Step 3: Connect Both Arduino Using TX and Rx Pins by connecting the Tx pin of the master Arduino
with Rx pin of the slave Arduino similarly Rx pin of master Arduino with Tx pin of slave Arduino.
Remember while uploading code in both these Arduino do not connect Tx and Rx pins otherwise serial
communication will not be possible

An Arduino Uno has a single hardware serial port that is the USB port. However, serial
communication is also possible using software libraries to emulate additional ports but software
serial is not as fast or efficient as hardware serial.

Serial.flush
Waits for all outgoing data to be sent rather than discarding received data (old version). If you
want to wait until all characters are sent, call Serial.flush immediately ollowing Serial.write
or Serial.print.

Serial.print returns the number of characters printed.

Serial.peek lets you âpeekâ the next character in the receive buffer.

// SoftwareSerialOutput sketch Output data to a software serial port

#include <SoftwareSerial.h>
const int rxpin = 2; // pin used to receive (not used in this version)
const int txpin = 3; // pin used to send to LCD
SoftwareSerial serial_lcd(rxpin, txpin); // new serial port on pins 2 and 3
void setup()
{
Serial.begin(9600); // 9600 baud for the built-in serial port
serial_lcd.begin(9600); //initialize the software serial port also for 9600
}
int number = 0;
void loop()
{
serial_lcd.print("Number: "); // send text to the LCD
serial_lcd.println(number); // print the number on the LCD
Serial.print("Number: ");
Serial.println(number); // print the number on the PC console
delay(500); // delay half second between numbers
number++; // to the next number
}
-------------------------------------------------------------------------------------------------------------------------------

Libraries to download: Adafruit_BusIO, Adafruit_GFX_Library, Adafruit_ILI9341