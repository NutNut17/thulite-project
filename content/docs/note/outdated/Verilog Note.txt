Verilog

Simulation Website: https://hdlbits.01xz.net/wiki/Iverilog

-------------------------------------------------------------------------------------------------------------------------------

1. Basic Structure

module moduleName(a, b, x, y);
    input a, b;         // Input of type wire net
    output x, y;        // Output of type wire net
    wire w0;            // A net

    xor m0(x, a, b);   // Instatiaion of a module named xor
    nanf201 m1(y, a, b); // Cell based impementation, xorf201 is defined primitives

endmodule

module xor();
...
endmodule

// Example of ASIC Cell Library Module of a NAND Gate
module nanf201 (A1, B1, O);
    input A1, B1;
    output O;
    nand (O, A1, B1);
    specify
        specparam
        Tpd_0_1 = 1.13:3.09:7.75, // rising delay (min-typical-max)
        Tpd_1_0 = 0.93:2.50:7.34; // falling delay (min-typical-max)
        (A1 => O) = (Tpd_0_1, Tpd_1_0);
        (B1 => O) = (Tpd_0_1, Tpd_1_0);
    endspecify
endmodule

// Example of a flip-flop design and testbench

module nand_Latch (preset, clear, q, qbar);
    input preset, clear;
    output q, qbar;
    nand #1 G1(q, preset, qbar), G2(qbar, clear, q);
endmodule

module nand_latch_test;
    reg preset, clear;
    wire q, qbar;
    nand_Latch M1 (preset, clear, q, qbar);

    initial
        $monitor("%0t preset = %b clear = %b q = %b qbar = %b",
        $time, preset, clear, q, qbar);

    initial
        begin
            #10 preset = 0; clear = 1;
            #10 preset = 1;
            #10 clear = 0;
            #10 clear = 1;
            #10 preset = 0;
        end

    initial
        #60 $finish;
endmodule

Output:
0 preset = x clear = x q = x qbar = x
10 preset = 0 clear = 1 q = x qbar = x
11 preset = 0 clear = 1 q = 1 qbar = x
12 preset = 0 clear = 1 q = 1 qbar = 0
20 preset = 1 clear = 1 q = 1 qbar = 0
30 preset = 1 clear = 0 q = 1 qbar = 0
31 preset = 1 clear = 0 q = 1 qbar = 1
32 preset = 1 clear = 0 q = 0 qbar = 1
40 preset = 1 clear = 1 q = 0 qbar = 1
50 preset = 0 clear = 1 q = 0 qbar = 1
51 preset = 0 clear = 1 q = 1 qbar = 1
52 preset = 0 clear = 1 q = 1 qbar = 0

-------------------------------------------------------------------------------------------------------------------------------

2. Language Feature

2.1 Port Connection by Position Association

module parent_mod;
    wire [3:0] g;
    child_mod G1 (.c(g[3]), .d(g[2]), .b(g[0]), .a(g[1]));  // child_mod G1 (g[1], g[0], g[3], g[2]);
endmodule

module child_mod (a, b, c, d);
    output a, b;
    input c, d;
endmodule

2.2 Net, Array and Concatenation

Net

Net array [a:b] indicates the bits a, a - 1, a - 2, ... , b + 2, b + 1, b. Let vec[7:0] be 00100100 = 36,
vec[3:0] = 4, vec[5:1] = 18, vec[0:3] = 2

Concatenation

The operator {} is used to concatenate the bits.

A = 1011, B = 0001, {A, B} = 1011_0001
{4{a}} = {a, a, a, a}
{0011, {{01}, {10}}} = 0011_0110

Arrays

A memory having 1,024 words (32-bit): reg [31:0] cache_memory [0:1023]. Bit-select and part-select are not valid with memories.
Reference may be made to only a word of memory.

Application 1:

flip_flop m0 (q[0], data_in[0], clk, set, rst);
...
flip_flop mn (q[n], data_in[n], clk, set, rst);

flip_flop m [n:0] (q, data_in, clk, set, rst);  // The clk, set, reset use the same net. The line of q is wired to all module.

Application 2:

array_of_flops m0 (pipe[7:0], data_in, clk, set, rst);
array_of_flops m1 (pipe[15:8], pipe[7:0], clk, set, rst);
array_of_flops m2 (pipe[23:16], pipe[15:8], clk, set, rst);
array_of_flops m3 (q[7:0], pipe[23:16], clk, set, rst);

array_of_flops m [3:0] ({q, pipe}, {pipe, data_in}, clk, set, rst);

2.3 Representation of Numbers

Format: <Bit Size><'><Value Representation Type><Value>
Value Representation Type: b - binary, d - decimal, o - octal, h - hexadecimal
Value: 0, 1, x(unknown), z(high impedance)

High impedance: When the output is neither 0 nor 1 and are not affected by input but other factor, like a switch

2'b10 - 2 bit binary of 10 = decimal of 2
3'd5 - 3 bit decimal of 5 = binary of 101
8'ha - 8 bit of hexadecimal 8 = binary of 00001010
8'hz - 8 bit of hexadecimal z = binary of zzzzzzzz
8'bx01 - 8 bit of binary 01 = binary of xxxxxx01
8'b00_01 - 8 bit of binary 00_01 = binary 00000001

2.4 Variables

AND 0   1   x   z
0   0   0   0   0
1   0   1   x   x
x   0   x   x   x
z   0   x   x   x

Data Types

Registers (Storage) are static, their values exist throughout simulation
Examples: reg, realtime, time, real, integer

Nets (Connectivity) used to create connectivity within a module. Nets of input or output that are not explicitly declared will
be default as wire
Examples: wire, supply1, supply0, tri1, tri0, trireg, tri, wand, wor, triand, trior

parameter: Constant
wire: Cannot be assigned by anything
reg: Cannot be target of a continuous assignment. Never be the output of a predefined primitive gate 

tri: Has the same functionality as wire, but it will be tri-stated in hardware
supply0: A global net connected to ground
supply1: A global net connected to power supply

A variable is referenced directly by its identifier within the scope in which it is declared. Hierarchical de-referencing is
also supported by a variable's hierarchical path name. For example: ChildModuleName.ChildVariableName

2.5 Operators

Reduction Operator: &(0101001) = 0, &(111...1) = 1

Bitwise AND: &
Bitwise OR: |
Bitwise NOT: ~
Bitwise XOR: ^
Bitwise XNOR: ~^ or ^~

Logical AND: &&
Logical OR: ||
Logical NOT: !

"A && B" will return a boolean scalar result (Logical)
"A & B" will return a boolean vector result (Bitwise)

Example: A = 3'b110, B = 3'b11x
A && B = 0 (A: true, B: false)
A & B = 110 (true)

"===" determines whether two words match identically on a bit basis, including bits that have values "x" or "z".
"!==" case inequality of the above.
"==" is less sensitive, producing an "x" when the test is ambiguous.

Conditional Operator: (Condition) ? (If true, do A) : (If false, do B);

wire [15:0] bus_a = drive_bus_a ? data : 16'bz;

If drive_bus_a = 1, set "data" on bus_a
If drive_bus_a = 0, set high impedance "z" on bus_a
If drive_bus_a = x, set "x" on bus_a

Operator Precedence

Unary (+, -, !, ~) > Multiplication, Division, Modulus > Add, Subtract > Shift (<<, >>) > Relational > Conditional

2.6 Behavioral Modeling

Initial behavior - One-shot sequential activity flow and starts running at initial time, may not be nested
Always behavior - Cyclic sequential activity flow and starts running at initial time, may not be nested

Procedural Continuous Assignment (PCA)

- Register variable can be assigned value only within a procedural statement, task, or function
- Register variable cannot be an input or inout port of a module.
- Net variable within a module must be driven by a primitive, continuous assignment, or module port.
- Net variable cannot be assigned in procedural statement but can be assigned in module declaration

assign … deassign

Similar to continuous assignment made to a net, but its binding can be removed. While a PCA is in effect, it overrides all
procedural assignments to the target variables and may not be supported by synthesis tools.

force … release

Applied to net and register variables. When the force is made to a net, the expression assigned to the target net overrides all
other drivers of the net until the release is executed. It is used primarily with hierarchical de-referencing in testbenches,
not supported by synthesis tools.

2.7 Control Operators

Delay Operator (#), in ns:

#10 reg_sum= reg_a + reg_b;     // After 10 time units, the sum of reg_a and reg_b is calculated and assigned to reg_sum
reg_sum= #10 (reg_a + reg_b);   // reg_a and reg_b is first calculated, and then after 10 time units, assigned to reg_sum

Blocking procedural assignments
- Use operator "=" and execute sequentially
- The statement that follows a procedural assignment cannot execute until the procedural assignment's execution is completed

Non-blocking procedural assignments
- Use operator "<=" and execute concurrently
- The execution of the statement that follows a non-blocking assignment will not be blocked
- Data are transfered concurrently
- If two or more statements assign value to the same register variable, the last statement will determine the final value

A = 1;
B = 0;
B = A; // Uses A = 1
A = B; // Uses B = 1
Result: A = 1, B = 1

A = 1;
B = 0;
A <= B; // Uses B = 0
B <= A; // Uses A = 1
Result: A = 0, B = 1

initial begin // Non-blocking assignments
    x1 <= #8 a; // x1 gets a(t = 0) at t = 8
    y1 <= #18 b; // y1 gets b(t = 0) at t = 18
end
initial begin // Blocking assignments
    #8 x2 <= a; // x2 gets a(t = 8) at t = 8
    #18 y2 <= b; // y2 gets a(t =26) at t = 26
end
initial begin // Blocking assignments
    #8 x3 = a; // x3 gets a(t = 8) at t = 8
    #18 y3 = b; // y3 gets a(t =26) at t = 26
end
initial begin // Blocking assignments
    x4 = #8 a; // x4 gets a(t = 0) at t = 8
    y4 = #18 b; // y4 gets a(t = 8) at t = 26
end

module test();
    reg sig_a, sig_b;
    initial begin
        sig_a <= sig_b; // 1. This encountered first in the sequential activity flow, and sample the values of c and d (x)
        sig_b <= sig_a; // 3. The initial sample of c and d are assigned back at the end of sequence and now c and d are (x)
        sig_a = 0;      // 2. sig_a and sig_b are assigned.
        sig_b = 1;
    end                 // Result: sig_a = x, sig_b = x
endmodule

Event Control Operator (@):

Synchronize execution of a procedural statement (or a block of procedural statements) to a change in the value of either an
identifier or an expression. When the activity flow reaches "@", the flow is suspended and to detect an event.

posedge transitions: 0 -> 1, 0 -> x, x -> 1
negedge transitions: 1 -> 0, 1 -> x, x -> 0

@ (event_A)       // If event_A has occurred, but not event_B, the behavior will be suspended at @(event_B).
begin             // If event_A occurs a second time while the process is suspended, it will be ignored.
    …             // If the activity flow is suspended at @(event_A), the occurrence of event_B will be ignored.
    @ (event_B)
    begin
    …
    end
end

event:

module Demo_mod_A ();
    event something_happens; // Declaration of an abstract event
    always begin
        -> something_happens; // Triggering of an abstract event
    end
endmodule

module Demo_mod_B ();
    always @ (Top_Module.Demo_mod_A.something_happens) begin // Event monitor
    // do something when something_happens in Demo_mod_A
    end
endmodule

wait: wait (condition)

- Wait and suspend the code until the condition become true, then remove the suspension

repeat: repeat (count_expression) statement

- count_expression is a constant
- If the count_expression evaluates to "x" or "z", the result will be treated as 0
- The execution can end prematurely with the "disable" statement

a = repeat (2) @(posedge clk) b;    // Equivalent to the code below:

begin
    tmp = b;
    @(posedge clk);
    @(posedge clk) a = tmp;
end

2.8 Constructor for Activity Flow Control

Case statement (case, casex, casez):

case - Complete bitwise match between expression and case_item expression.

reg [1:0] sig_A;
case (sig_A)
    2'b00:   $display ("sig_A has no ones");
    2'b01,   2'b10: $display ("sig_A has a single one");
    2'b11:   $display ("sig_A has two ones");
    2'bx:    $display ("sig_A is unknown value");
    2'bz:    $display ("sig_A is high impedance value");
    default: $display ("Value of sig_A is mixed");
endcase

casex - Treat 'x' and 'z' values in expression or case_item as don't-cares
casez - Treat 'z' value in expression or case_item as don't-cares but NOT 'x'

case    0   1   x   z   casex   0   1   x   z   casez   0   1   x   z 
0       1   0   0   0   0       1   0   1   1   0       1   0   0   1
1       0   1   0   0   1       0   1   1   1   1       0   1   0   1
x       x   0   1   0   x       1   1   1   1   x       0   0   1   1
z       z   0   0   1   z       1   1   1   1   z       1   1   1   1

module casex_decoder;
    reg [7:0] r, mask;
    initial
        r = 01100110;
    always begin
        mask = 8'bx0x0x0x0;
        casex (r ^ mask) // bitwise xor, the expression is now x1x0x1x0
            8'b001100xx: do_task_1;
            8'b1100xx00: do_task_2; // matched first, do_task_2 is executed!
            8'b00xx0011: do_task_3;
            8'bxx001100: do_task_4; // matched second, do_task_4 is NOT executed!
        endcase
    end
endmodule

Disable statement: disable procedureName;

- Used to terminates a named block or task.
- “$finish” terminates simulation.

Parallel activity: flow (fork ... join)

- Create parallel threads of activity, each executing concurrently with the others.
- Not supported by synthesis tools, support waveform generation in testbenches.
- The statement following fork ... join cannot execute until all the activity of the parallel threads is complete.

fork
    #50 r = 'h35;
    #100 r = 'h00;
    #150 r = 'hF7;
    #300 r = 'h00;
join

is equivalent to

begin
    #50 r = 'h35;
    #50 r = 'h00;
    #50 r = 'hF7;
    #150 r = 'h00;
end

Race Condition occur when the same register variable is assigned value and referenced simultaneously in multiple activity
threads in a parallel block. Avoid this! For example:

fork
#150 reg_a = reg_b; // reg_a is asigned and referenced at the same time
#150 reg_c = reg_a;
join

Forever statement: forever (...)

- A computational activity flow, not necessarily concurrent with any other activity flow
- Can be nested
- Executes only when it is reached within a sequential activity flow

2.9 Tasks and Functions

- Tasks create a hierarchical organization of the procedural statements. Declared outside of a module.
- Functions substitute for an expression. Declare inside of a module.

2.9 Simulation

$display vs. $monitor

$display - Executes immediately when it is encountered in the sequential activity flow of a behavior
$monitor - Executes automatically at the end of the current time step (after the non-blocking assignments have been updated).
So it will display the data of variables at the end of time step but not the current value of data at final line

