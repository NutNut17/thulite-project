Python's Intepreter - change source code into machine language

Spyder: Suitable for machine learning, deep learning (Mid-Low Scale)
Jupyter notebook (Ipython): Can use browser to login into server to operate with multiple user
Anaconda: Contains all the feature above
Pycharm: Suitable for web developement (High-Mid Scale)
Windows Terminal: Python needs to be insalled
VS Code: Python needs to be installed
Google Colab: Run python online

How to install python:

1. Download python installer: https://www.python.org/downloads/release/python-3115/
2. Install and click set environment and make sure pip(package manager) is installed
3. On windows terminal, type python --version to check if it's installed
4. Run "python" in terminal to call python intepreter which will work in console
5. Run "a=1" then run "a" so see if it responds 1 or not, then run exit() to exit the intepreter
6. On windows ternimal, type pip -V to check if pip is installed
7. pip can download package for python quickly in the intepreter console. For example, run this in windows terminal: "pip install opencv-python"
8. To check if the package is installed properly, we use the previous OpenCV package as example, run "import cv2", then run "cv2.__version__"

--------------------------------------------------------------------------------------------------------------------------------
Tutorial
--------------------------------------------------------------------------------------------------------------------------------

1. Basic

1.1 '#' is used for comment and <Tab> is used for blocking {}

1.2 Variable declaration

var = 'this is a string'
print(var, type(var))   # Output: this is a string <class 'str'>
var = 100
print(var, type(var))   # Output: 100 <class 'int'>

1.3 Output and string

print(variable1, variable2, "Message %d" %intVariable, type<var>)   # Comma is used to concatenate
int(strVariable) str(intVariable)                                   # Variable cast
print("A, {}, B {}. {1+1}".format("a", "b"))                        # Output: A, a, B b. 2

1.4 Input

variable = input("Message to the user")

1.5 Conditional Statement

if condition:
    statement1
elif condition:
    statement2
else:
    statement3

while a < b:
    statement

for variable in listVariable:
    statement

for i in [3, 4, 10, 25]:
    print (i)
for c in "Hello World":     # Print characters one at a time
    print (c)
for i in range(10, 0, -1):  # Loop over a range of numbers
    print (i)
for i, j in [[1,2], [3,4] ]:# Nested for loop. Two element in the list, [1,2] means i = 1, j = 2. Output: 2 12
    print ("%4d" %(i*j))

1.6 Boolean

AND: a and b
OR: a or b
NOT: not(argument)

1.7 Operators

+, -, *, / (Divide into float), // (Divide into int), %, ** (to the power of), +=, -=, *=, /=
<, >, <=, >=, ==, !=

1.8 Function Declaration

def functionName(arguments):
    statement
    return variable

# Function that returns multiple variable

def functionName(arguments):
    statement
    return variable1, variable2

variable1, variable2 = functionName(argument1, argument2)   # Call the function and return 2 value

# Lambda Function: A small anonymous function that can take any number of argument but can only have one expression

<lambda_name>  = lambda <arguments> : <return1> <optional:condition>

Example:
x = lambda a, b : a * b
print(x(5, 6))

abs_number = lambda x : x if x >= 0 else -x
print(abs_number (-5))

# filter(function, list)

e = [1, 7, 13, 19, 25]
for i in filter(lambda x: x > 10, e):
    print(i)

# map function: executes a specified function for each item in an iterable such as str, list, tuple, set, dict

map(function, iterables)

Example:
g = [3, 1, 89, 22, 13]
for i in map(lambda x: x * 2 + 10, g):
    print(i)

# Convert float to int
g = [0.3, 0.1, 8.9, 2.2, 1.3]
for i in map(int, g):
    print(i)

1.8 Modules

# In file module1.py

Declaration and statement code in module1.py file...

# Then in another python file:

#import sys
#sys.path.append('path_to_module1')

import module1

1.9 File Processing

f = open("file location", "w")  # Open a file for writing
g = open("bar", "r")            # Open a file for reading
h = open("bar", "r+")           # Open a file for reading and writing

f.write("Hello World")          # Write into file
data = g.read() 		        # Read all data
str = g.read(n)                 # Read nth string
line = g.readline() 	        # Read a single line
lines = g.readlines() 	        # Read data as a list of lines

for i in range(0,10):
	f.write("2 times %d = %d\n" % (i, 2*i))

f.close()
g.close()

Examle code to read all txt file in a folder

import os  
def read_path(path_name): 
     for dir_item in os.listdir(path_name):
        # Use absolute path to identify for operation
        full_path = os.path.abspath(os.path.join(path_name, dir_item))
        if os.path.isdir(full_path):    # If it was a folder, the subfolder is called recursively
            read_path(full_path)
        else:                            # File
            if full_path.endswith('.txt'):
                input = open(full_path, 'r')
                printinput.read()
                
if __name__ == '__main__':  # this mean that this file is running independently itself and not imported as module to run
        read_path(r"C:\Users\howwi\OneDrive\Coding\Python\pythontest")  # Insert folder path

--------------------------------------------------------------------------------------------------------------------------------
2. Data Structure
--------------------------------------------------------------------------------------------------------------------------------

2.1 Lists

a = [2, 3, 4]		        # A list of integer
b = [2, 7, 3.5, "Hello"]    # A mixed list
c = []			            # An empty list
d = [2, [a, b]]		        # A list containing a list
e = a + b			        # Join two lists
print ( e )
x = a[1] 		            # Get 2nd element (0 is first)
x = a[-1] 		            # Get final element
y = x[1:3] 	                # Return a sub-list
y = x[1][0][2] 	            # Nested lists
x[0] = 42 		            # Change an element
x[2:]                       # Select element with index >= 2
x[:2]                       # Select element with index < 2

len(x)                      # Return the list size
x.append(element)
x.insert(index, element)    # Insert a new element at index
x.remove(element)
x.pop()
x.pop(index)
del x[0]                    # Delete index 0 and the other element is shifted
x.clear                     # Delete all element but the list still exist
y = x.copy()
y = list(x)                 # Do the same thing as copy
y = x                       # Assign the pointer. Changing x or y will make change on both side

2.2 Set: unordered set

x = {1, 2, 'a', {x, y}, [1, 2]}
x = y.union(z)              # Union set 

2.3 Tuple: similar to list, but it's read-only

x = (1, 2, 'a', {x, y}, [1, 2], {"abc"})
x = (, )
y = x(1:3)                  # Slice. y = 2, 'a'

2.4 Dictionaries

x = {key1: value1, key2: value2, ...}
x = {'uid': 105, 'login': 'beazley', 'name' : 'David Beazley'}

phonebook = {
    "John" : 938477566,      
    "Jack" : 938377264,       
    "Jill" : 947662781
}
phonebook.pop("John")
print(phonebook)
for key, val in phonebook.items():
    print (key, "->",val)
print (phonebook["Jill"])
for value in phonebook.values():
    print(value)

--------------------------------------------------------------------------------------------------------------------------------
3. Class
--------------------------------------------------------------------------------------------------------------------------------

3.1 Class Declaration

class ClassName:
    'Optional class documentation string'   # Can be accessed via ClassName.__doc__
    # Class suite defining all component. Class members, data attributes and functions
    instanceCount = 0

    def __init__(self, a, b):   # Constructor
        self.valueA = a
        self.valueB = b
        ClassName.instanceCount += 1
    
    def displayCount(self):
        print ("Total instances: %d" %ClassName.instanceCount)

    def displayInstance(self):
       print ("A: ", self.valueA, "B: ", self.valueB)

# In the main code:

class1 = ClassName("Hello", 2000)
print(ClassName.__doc__)
class1.displayInstance()
print ("Total Count %d" % ClassName.instanceCount)

3.2 Class inheritance

class SubClassName (ParentClass1[, ParentClass2, ...]):
    'Optional class documentation string'
    class_suite

Example code for inheritance:

class Parent:        # define parent class
   parentAttr = 100
   def __init__(self):
      print ("Calling parent constructor")

   def parentMethod(self):
      print ('Calling parent method')

   def setAttr(self, attr):
      Parent.parentAttr = attr

   def getAttr(self):
      print ("Parent attribute :", Parent.parentAttr)

class Child(Parent): # define child class
   def __init__(self):
      print ("Calling child constructor")

   def childMethod(self):
      print ('Calling child method')

c = Child()          # instance of child
c.childMethod()      # child calls its method
c.parentMethod()     # calls parent's method
c.setAttr(200)       # again call parent's method
c.getAttr()          # again call parent's method

Overloading Operators

class Vector:
    def __init__(self, a, b):
       self.a = a
       self.b = b
 
    def __str__(self):
       return 'Vector (%d, %d)' % (self.a, self.b)
    
    # overloading + operator
    def __add__(self,other):
       return Vector(self.a + other.a, self.b + other.b)

v1 = Vector(2,10)
v2 = Vector(5,-2)
print (v1 + v2)

To hide an attribute, name the attribute with a double underscore prefix

class JustCounter:
   __secretCount = 0
  
   def count(self):
      self.__secretCount += 1
      print(self.__secretCount)

counter = JustCounter()
counter.count()
counter.count()
# print(counter.__secretCount)  # Error, this was unaccesible
print(counter._JustCounter__secretCount)

--------------------------------------------------------------------------------------------------------------------------------
Datetime
--------------------------------------------------------------------------------------------------------------------------------
from datetime import datetime, date, time

today = date.today()    # 'date' object
now = datetime.now()    # 'datetime' object 

formatted_date = today.strftime("%Y-%m-%d") # string format time

date_string = "2023-11-12"
parsed_date = datetime.strptime(date_string, "%Y-%m-%d").date() # string to create date objects

--------------------------------------------------------------------------------------------------------------------------------