Source: https://webcourse.ncue.edu.tw/Java/index.php

1. Starting on Java

Java is derived from C/C++. Hence, it has a lot of feature that is similar to C/C++ and has it's own special features. A java
file has an extension of .java and they must be located in a directory to run.

c:\Java> javac ClassName.java   // Compile to bytecode
c:\Java> java ClassName         // Run

    Usually, we use a standard to name variables as follows:

I) The first word in the name of variable are usually in small letter and the second word in the variable is in capital letter.
II) Verbal words are placed at the front of the variable name.
III) The name of the class usually use a capital letter as the first word.

2. Features of Java

-To get the maximum value of long data type we can do this: java.lang.Long.MAX_VALUE
-Byte Data Type

3. Simple IO

Scanner

import java.util.Scanner;   // Import Scanner Library, Scanner is a data type
Scanner objectName = new Scanner(System.in); // Declare a Scannner objectName
variableName = objectName.scannerLibraryFunctions();    // Reads the Input
objectName.close();     // A scanner must be closed at the end of program

Common Scanner Library Functions:
nextByte(), nextShort(), nextInt(), nextLong(), nextFloat(), nextDouble(), next() // For String, nextLine() // For Strings

To read a character, we can do as follows
str = scn.next();
ch = str.charAt(0); // Take the 0th character at the string str

In some older version of java, we might need something to read float or double number correctly. Here is a function:
    public static double parseDouble(String s)
It returns the double value in the string argument or sometimes double-type argument;

System.out.print("Message" + variable); // Prints output on console. To change between strings and variable, use '+' to connect

Learning from an example of a code

import java.text.*;         // The "*" imports every package in java.text
import java.util.Scanner;
import java.lang.Math;

public class className {
    public static void main(String args[]) {
        Scanner scn = new Scanner(System.in);
        DecimalFormat f1 = new DecimalFormat("#.00");   // Make an object to specify decimal format
        double base = Double.parseDouble((scn.next()));
        double exponent = Double.parseDouble((scn.next()));
        System.out.println(f1.format(Math.pow(base, exponent)));
        scn.close();
    }
}

Wrapper Class

The class of datatype like Integer, Double, Byte, ... Are used to do some useful opreations on those datatypes.

Example:
inum = Integer.parseInt("654") + 3; // inum = 657
str = Integer.toString(345) + "3";  // str = "3453"

4. Operators

(~) is an operator to get the complement
Conditional Operator (?:) - Syntax: condition ?: statementIfTrue : statementIfFalse ;
(:) can be used in for(String s:str){...} to loop with each string in str array
(:) also can be used in assertion. It the assertion will return a error message if the assumption is false
assert : expression;

Data Type Conversion in Operations

(ch / s) - (d / f) - (s + i); Let ch(char), s(short), f(float), i(int), d(double)
( ch(char-->short) / s(short) ) - (d(double) / f(float-->double)) - (s(short-->int) + int(int))(int-->double);

5. Strings

Java have few data types to deal with strings. String, StringBuffer, StringBuilder. String is a read only data. While
StringBuffer is like a class, can add and remove char easily. StringBuilder is basically identical to StringBuffer and it's
more effcient but not suitable for multithread. To declare a String, use the following syntax

String name = new String( args );

String Functions

length()        // Returns the length of string
toUpperCase()   // UpperCase all character in the string
toLowerCase()   // LowerCase all character in the string
int indexOf( String )           // Returns the index of the first argument string as the substring of the original string
int indexOf( String, int n )    // The same as above and start searching from the nth index
char chatAt(int n)  // Returns the character at nth index
String substring(int n) // Returns the substring starting from index n
String replace(char a, char b)  // Replace the first char a as b in the String
String concat(string) // Concatenate String
String trim() // Remove empty space at the head and end of String
int compareTo(string) // Returns 0 if the string are equivalent, return negative value when the argument string is greater

Double.parseDouble(string)  // Reads the double in the string and returns it
Double.toString(double)     // Convert double to String
String.valueOf(double)      // Convert double to String
split()     // Split the Strings seperated by empty spaces. Example: String[] tokens = str.split(" ");

StringTokenizer

StringTokenizer st1 = new StringTokenizer(str);
while( st1.hasMoreTokens() ){ System.out.println(st1.nextToken());}

Format

double i= 12345.67;
DecimalFormat f1 = new DecimalFormat("##,####.0000");
DecimalFormat f2 = new DecimalFormat("###,###.00");
DecimalFormat f3 = new DecimalFormat("0000,0000.0000");
System.out.println(f1~f3.format(i));
Outputs:
1,2345.6700
12,345.67
0001,2345.6700

Date

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Test {
    public static void main(String[] args) {
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("EE-MM-dd-yyyy");
        DateFormat shortFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
        DateFormat mediumFormat = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
        DateFormat longFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
        DateFormat fullFormat = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL);

        System.out.println(date);
        System.out.println(dateFormat.format(date));
        System.out.println(shortFormat.format(date));
        System.out.println(mediumFormat.format(date));
        System.out.println(longFormat.format(date));
        System.out.println(fullFormat.format(date));
    }
}
Output:

Mon Oct 10 19:59:32 MYT 2022
Mon-10-10-2022
10/10/22, 7:59 PM
Oct 10, 2022, 7:59:32 PM
October 10, 2022 at 7:59:32 PM MYT
Monday, October 10, 2022 at 7:59:32 PM Malaysia Time

StringBuffer Functions

append(datatypes)   // Similar to concat
setCharAt(int, char)
insert(int, String) // Insert the String at index n. Example:

StringBuffer str = new StringBuffer("1234567890");
str.insert(1,"--");
Output: 1--234567890


6. Arrays in Java

To declare one, we the syntax is quite different with C. Since the pointers are different
int [][] arr = new int [X][Y]; or int arr[][] = new int [X][Y]; // Y could be empty
We can use arr.length() to get the length of array.

7. Functions (usually called method in Java)

    public static returnType methodName( Arguments ){ ... };    

Main function must be always on top.

Random Number:

        System.out.println((int) Math.floor(Math.random() * (max - min + 1) + min));

8. Classes

Only this() can used to call a constructor in a constructor and only be in the first line of the block. But this is an instance
of a class and it was not limited to be in the first line.

public Class()
{
    this(args); // Calls a class constructor of argument args
}

- Global class variable must be declared with static.
- Assign null to delete an instance of a class. If c2 is assigned to c1, c2 must be deleted
- Instance variable and instance function can only be called by it's instance
- Class variable must be declared static and they are shared among all instance of a class
- Class function must be declared static and they can be access by the name or instance of class
- Class function cannot access (store or read) non-static variable and function.
- Since 'this' was an instance, 'this' can't be accessed by class function because 'this' is an instance and are non-static

If we want to declare an inner class which is not static and wish to access the class in the main function. We need to
construct an instance of inner class in the outer class' constructor. Then, declare an instance of the outer class in the main
function.

Anoymous inner class can define a new method that is not declared in Caaa class as below. 

General Syntax:

(
    new className()
    {
        returnType methodName(parameter)
        {
            method...
        }
    }
).methodName(parameter);

public class Test {
    public static void main(String args[]) {
        (new Caaa()
        {
            void set_num(int n)
            {
                num=n;
            System.out.println(num);
            }
        }).set_num(5);
    }

    static class Caaa {
        int num;
    }
}
Output: 5

All of the class in a nested class have access to private members.

9. Class Inheritance

To declare an Inheritance

class subClassName extends supClassName
{ // Declarations }

A inherited class inherits all of the members of super class except for some features stated below. Inherited class can add
more members to itself and since it was a new class, it needs constructors.

- Constructor and destructor of superclass
- Private member of superclass (Can be accessed by superclass' functions)
- Protected members can be accessed freely among inherited class but it cannot be access by class outside the inheritance.
- super() is similar to this(). Used to access super class of the instance and usually used to call constructor of super class
- super() is a constructor, it only can be called at the first line. While super is the object, can be called anywhere
- Always declare a default constructor on super class
- A subclass class instance can replace a super class instance. For example: BaseClass bc = new SuperClass(); // bc is SuperClass

Overloading: Distinguish by parameter
Overriding: Distinguish by class

A function in subclass may only override it's superclass when the access priority is higher or equal then it's superclass.
Access priority: public > undeclared access specifier > protected 

Example:

static class C1 { public void say(){ System.out.println("A"); } }
static class C2 extend C1 { void say(){ System.out.println("B"); } }
C2.say(); // Output: A, say() in C2 cannot override say() because privileges of say() in C1 is higher than C1 

static class C1 { public void say(){ System.out.println("A"); } }
static class C2 extends C1 { public void say(){ System.out.println("B"); } }
C1.say(); // Output: A
C2.say(); // Output: B

'final' can be used to finish inheritance, stop changing value of variable, finish overriding. The syntax is silimar to const
in C/C++. 

10. The Class 'Object'

Object is the base of all class in Java. Even main class is inherited by Object class.

Method of Object:

Class getClass(): Get the type of the class. Example: System.out.println(a.getClass()); // Prints the className of a
boolean equals(Object object):  boolean bo = b.equals(a); // returns true is a and b is the same class
String toString(): System.out.println(c.toString()); // Prints the repretation of class c as String

11. Abstraction

Similar to virtual in C++
- The word 'abstract' is used to declare an abstract class or method
- An abstract must only be defined in the inherited part
- An abstract class cannot be an instance
- If an abstract method is still not defined in the inherited class, it must still declared as abstract in inherited class

12. Interface

Interface is defining a new means to a class like abstact
- The word 'interface' is used to declare an interface class
- The interface method must be abstact and the members must be initialised and final. It was set defaultly, so we don't need to
write the keywords 'final' and 'abstact' in the declaration of interface
- Interface members are public

13. Implementation

Interface can be implemented by the keyword 'implements'. Java does not support a derived of multiple super class. But, we can
make multiple implementation and implements it on an inhereted class. Interface can also be inherited.

    class A implements I1, I2, I3, ...
    implements D extends B1, B2, B3, ...

Example code:

public class T1 {
    public static void main(String[] arg) {
        C1 c[] = new C1[2]; // Create array of class C1
        c[0] = new C1();    // Constructor called
        c[0].show(); // Prints 30
    }
}
interface In {
    int n = 10; // This is final and public
    void show();// This is abstact and public
}
class C1 implements In {
    int m;
    C1() { m = 20; }
    public void show() { System.out.println(m + n); } // Must be public because the implementation are public
}

14. Working on Multiple File

As we compile multiple java files, they are compiled into bytecode and they are visible to each other.

Package

    package packageName;

- Declare a package on top of a java file to make all of the classes in the java file as part of the package
- The same package declaration can be done on other java file to put multiple java files into the same package
- A class with no modifier can only be accessed by the same package
- A class must be public to be accessible to other package
- To access to a class in another package, use the syntax packageName.className
- If a member of a class is public but the class is not public, it can only be accessed by classes in the same package
- If a member of a class is public and the class is public, it can be accessed by classes on other package
- If a member of a class have no modifier, it could only be accessed by the same package

A specific class from a  package can be imported by using the keyword 'import'. import packageName.className;

A package could have a hierachy structure. To declare a sub-package , we use the syntax:

    package packageName.subPackageName;

Basically packages are directory of the files and same java files package are in the same directory.

15. Exception

try{ // Do some checkings }
catch(exceptionType variableName){ // Statements to handle exception }
finally{ // Code that will always run eventually }

If we want to write multiple catch on the code, the inherited exception class must be written above the base class of the
exception. We use the keyword 'throw' to throw an exception.

    throw new exceptionConstructor(); // throws an exception
    method throws exceptionName1, exceptionName2, ... // The method will throw an exception when the method is called
    class className extends exceptionName{} // Inherit an exception

16. File Handling

File class

File file1 = new File("C:\\test.txt");
file1.exists(); //  true if the file exist
file1.getName();
file1.getParent();
file1.getPath();
file1.length();
file1.lastModified();
file1.renameTo(file2);
file1.delete();

String list1[] = file1.list();  // return the name of every file in the directory


Reader class methods

void close()
int read(), read a character
int read(char[] buf), read and store in buf and return the length of characters
int read(char[] buf, int off, int len), read and store in buf from starting at index off for len characters
long skip(long n), skips n characters

Writer class methods

void close()
abstract void flush(), write all the characters in the buffer to the file
void write(char[] buf), write the buf to the file

FileReader(String filename) // A class to read file and the filename is the locaion of the file
FileWriter(String filename) // A class to write file, the original data will be erased
FileWriter(Strnf filename, Boolean a) // if a is true, it will not erase the file

BufferedReader class (BufferedWriter are basically the same, by changing read to write)

BufferedReader(Reader in) // Constructor
BufferedReader(Reader in, int size)

method

void close()
int read() // Read a character
String readLine()

Example:

FileReader fr = new FileReader("C:\\file.txt");
BufferedReader bfr = new BufferedReader(fr);
while(ch = bfr.read())
{
    System.out.print(ch);
}
fr.close();

The example above only work on text files. InputStream and OutputStream can work on both text file and binary file.

FileInputStream(String filename)

method

int available() // get the number of byte of the file
void close()
long skip(long n) // skip n bytes in the stream
int read() // read a byte in the stream
int read(byte[] b) // read the stream and store to b

Example:

public static void main(String args[]) throws IOException
{
    FileInputStream fi = new FileInputStream("C:\\file.txt");
    System.out.println("file size="+fi.available);
    byte ba[] = new byte[fi.available];
    fi.read(ba);
    System.out.println(new String(ba));
    fi.close();
}

FileOutputStream(String filename)// Constructor
FileOutputStream(String filename, Boolean a)// Erase the file in a is false
void write(byte []);


17. Multithreading

Under the class Thread, multithreading must be done in run() method. For example,

class className extends Thread
{
    // members
    modifier run()
    {
        // multithreading code
    }
}

we can inherite multithreading from Thread class or by implementing Runnable interface. Runnable has abstract run() method.

Example:

class CTest extends Thread {
    private String id;

    public CTest(String str) {
        id = str;
    }

    public void run() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.println(id + " is running");
            }
        }
    }
}

public class T1 {
    public static void main(String[] arg) {
        CTest a = new CTest("a");
        CTest b = new CTest("b");
        a.start();  // Call method start() to do multithreading
        b.start();  // Put these two line code together to do multithreading
        System.out.println("Starting...");  // This line will finish first
    }
}

Output: (a.start() and b.start() run together)

Starting...
b is running
a is running
a is running
b is running
a is running
...

There is 4 state of threads.

Newly Created State - When new Thread() is called. When the thread class constructor are called
Runnable State - When start() method is called on a new thread
Blocked State - When wait(), sleep(), join() is called on a running state
Dead State - when stop() method is called on a running state

sleep(int); // Must be in try-catch block. Sleep for millisecond
join();     // Must be in try-catch block. Force the thread to finish execute before moving to next line

Synchronization

Add the keyword synchronized on the class to make sure that the thread will update the value of members correctly.

18. Collection

Java Collection Framework insists of three part, Interface, Algorithms and Implementations. Generic is similar to template in
C++. For example we want to make a TreeSet of Integer, TreeSet<Integer> tset = new TreeSet<Integer>(); The <Integer> is generic

Common methods for collection (Returns true when the method success)
add(E o)                            // Add object o as new collection
addAll(Collection<? extends E> c);  // Add all object c which is an element of collection of generic that are extended by E
void clear();                       // Remove all elements in the collection
contains(Object o);
containsAll(Collection<?> c);
isEmpty();
remove(Object o);
removeAll(Collection<?> c);
retainAll(Collection<?> c);         // Except for collection c, remove all other elements of collection
int size();
Iterator<E> iterator()              // Get collection

SortedSet implements TreeSet. And here are the methods of SortedSet

TreeSet()                           // Construct a new TreeSet
TreeSet(Collection<? extends E> c)  // Construct a new TreeSet with c as elements
E first()   // Get the first element
SortedSet<E> headSet(E toElm)       // Get TreeSet that is smaller or equal than toElm
E last()    // Get the final element
SortedSet<E> tailSet(E fromElm)     // Get TreeSet that is larger or equal than fromElm
SortedSet<E> subSet(E fromElm, E toElm)// Get TreeSet that is between fromElm to toElm

Example: TreeSet ts = new Test<Integer>(); System.out.println("The First Element is: "+ts.first());

List belongs to ordered collection. Here are some methods of List

void add(int index, E ele)  // Add element ele at index 
boolean addAll(int index, Collection<? extends E> c)    // Add collection at index
E get(int index)
int indexOf(Object o)
Iterator iterator() // Get the object of the set
int lastIndexOf(Object o)
E remove(int index)
E set(int index, E ele) // Set the element ar index to ele
List<E> subList(int frontIndex, int toIndex)

Here are some method for linked list and array list

LinkedList()
LinkedList(Collection<? extends E> c)
void addFirst(E o)
void addLast(E o)
E getFirst()
E getLast()
E removeFirst()
E removeLast()

ArrayList()
ArrayList(Collection<? extends E> c)
ArrayList(int initialCapacity)  // Create and set initial capacity
void ensureCapacity(int minCapacity)
void trimToSize()

Map<Key, Value> methods
void clear()
boolean containsKey(Object key)
boolean containsValue(Object value)
Value get(Object key)
boolean isEmpty()
Set<K> keySet()         // Convert keys to set
Collection<V> values()  // Convert values to collection
Value put(Key key, Value value)
Value remove(Object key)
int size()

HashMap()
HashMap(int initialCapacity)
HashMap(Map<? extends K, ? extends V> m)

SortedMap implementation - TreeMap

TreeMap()
TreeMap(Map<? extends K, ? extends V> m)
TreeMap(SortedMap<K, ? extends V> m)
K firstKey()
K lastKey()
SortedMap<E> subMap(K fromKey, K toKey)
SortedMap<E> tailMap(K fromKey)

Iterator methods

Iterator<E> iterator()
boolean hasNext()
E next()
void remove()

Example code:

TreeSet<String> tset = new TreeSet<String>();
// Added some string
Iterator<String> ite = tset.iterator();
while(itr.hasNext())
    System.out.print(itr.next() + " ");
// is equal to
System.out.print(test);

ListIterator<E> listIterator()
ListIterator<E> listIterator(int index)
void add(E o)
boolean hasNext()
boolean hasPrevious()
E next()
E previous()
int nextIndex()
int previousIndex()
void remove()   // Remove the element
void set(E o)   // Set final element as o

ListIterator<Integer> litr = llist.listliterator();  // Get the iterator for the llist collection

Example:

import java.util.*;

public class T1 {
    public static void main(String args[]) {
        LinkedList<Integer> llist = new LinkedList<Integer>();
        for (int i = 0; i <= 100; i += 10)
            llist.add(i);
        ListIterator<Integer> litr1 = llist.listIterator();
        System.out.print("Linked List: ");
        while (litr1.hasNext())
            System.out.print(litr1.next() + " ");
        ListIterator<Integer> litr2 = llist.listIterator(llist.size());
        System.out.print("\nInverted Linked List: ");
        while (litr2.hasPrevious())
            System.out.print(litr2.previous() + " ");
    }

}
Output:

Linked List: 0 10 20 30 40 50 60 70 80 90 100
Inverted Linked List: 100 90 80 70 60 50 40 30 20 10 0

19. AWT (Abstract Windowing Toolkit)

Below is a code to make windows using AWT

import java.awt.*;

public class T1 {
    static Frame fm = new Frame("Frame Test");
    static Label lb = new Label();
    static Button bn = new Button("Press");
    static Checkbox cb1 = new Checkbox("Selection 1", true);
    static Checkbox cb2 = new Checkbox("Selection 2", false);
    static Checkbox cb3 = new Checkbox("Selection 3");
    static Checkbox cb4 = new Checkbox("Selection 4", true);
    static Checkbox cb5 = new Checkbox("Selection 5", true);
    static TextField tf1 = new TextField("Text Field 1");
    static TextField tf2 = new TextField("Text Field 2");
    static TextArea ta = new TextArea("demo", 10, 10, TextArea.SCROLLBARS_VERTICAL_ONLY);

    public static void main(String args[]) {
        fm.setLayout(null); // Must reset the layout to enable object to be placed at frame manually
        fm.setSize(500, 500);
        fm.setLocation(-6, 0); // x = -6 to stick the left edge, default(0, 0)
        fm.setBackground(Color.pink); // Default: White

        lb.setText("This is a label");
        lb.setLocation(50, 50); // Location relative to the frame
        lb.setSize(150, 30);
        lb.setBackground(Color.white);
        lb.setAlignment(Label.CENTER);
        lb.setForeground(Color.DARK_GRAY); // Text Color
        Font ft = new Font("Serief", Font.ITALIC + Font.BOLD, 18);
        lb.setFont(ft);

        bn.setSize(150, 30);
        bn.setLocation(50, 90);
        // bn.setBounds(50, 90, 150, 30); // We can use this as alternative

        cb1.setBounds(50, 130, 150, 10);
        cb2.setBounds(50, 150, 150, 10);
        cb3.setBounds(50, 170, 150, 10);
        cb4.setBounds(50, 190, 150, 10);
        cb5.setBounds(50, 210, 150, 10);
        CheckboxGroup gp = new CheckboxGroup(); // Grouped Checkbox may only have one true
        cb4.setCheckboxGroup(gp);
        cb5.setCheckboxGroup(gp);

        tf1.setBounds(50, 230, 150, 20);
        tf2.setBounds(50, 260, 150, 20);
        tf1.setEditable(false);
        tf2.setEchoChar('*');// Commonly for password input

        ta.setBounds(50, 290, 150, 100);

        fm.add(lb);
        fm.add(bn);
        fm.add(cb1);
        fm.add(cb2);
        fm.add(cb3);
        fm.add(cb4);
        fm.add(cb5);
        fm.add(tf1);
        fm.add(tf2);
        fm.add(ta);
        fm.setVisible(true);
    }
}

AWT Layouts - do frm.setLayout(layoutInstance) to apply layout

Border Layout - Adds components to 5 direction of the layout, EAST, SOUTH, WEST, NORTH and CENTER.

BorderLayout border = new BorderLayout(int hgap, int vgap);
frm.setLayout(border);
frm.add(new Button("North"),border.NORTH);

Card Layout - Stack cards(components)

CardLayout card = new CardLayout(int hgap, int vgap);
frm.setLayout(card);
frm.add(new Button("Button 1"),"c1");
frm.add(new Button("Button 2"),"c2");
...
card.show(frm,"c1");    // Put c1 on top of stack to be showed

Flow Layout - Components are flexible and moves from left to right, up to down

FlowLayout flow = new FlowLayout(int align, int hgap, int vgap);
frm.setLayout(flow);
frm.add(new Button("Button 1"));

Grid Layout - Add grid to the frame

GridLayout grid = new GridLayout(int rows, int cols, int hgap, int vgap);
frm.setLayout(grid);
loop(){ frm.add(new Button("Button i")) };

Using Panels - Layouts are implmented on the whole window. If we want to splits the layout we can use panel to act as container

// A code for simple calculator frame

static Frame frm = new Frame();
static Panel pnl = new Panel(new GridLayout(3, 3));
static Label lab = new Label("0. ", Label.RIGHT);
public static void main(String args[]){
    frm.setLayout(null);    // Clear layout first
    frm.setSize(200,150);
    frm.setResizable(false);
    lab.setBounds(20, 30, 120, 20);
    lab.setBackground(new Color(240, 220, 190));
    pnl.setBounds(20, 60, 120, 80);
    for(int i = 0; i < 9; i++)
        pnl.add(new Button(Integer.toString(i)));
    frm.add(lab);
    frm.add(pnl);
    frm.setVisible(true);
}
20. Swing

A swing is a floating window that is better than frame, because the contents of swing can adjust based on the floating window
size. JFrame is the top-level container for swing. It is a class just like JDialog, JWindow but JFrame is used for commonly
seen floating window. We mmust import javax.swing.* library to use swing.


JFrame() or JFrame(String title)    // Create JFrame class for a floating window (Top-Level)

Container contentPane = frame.getContentPane()    // Get content panel of a floating window (Secondary-Level)

JScrollPane and Jpanel is similar, they are the subcontainer of a content pane (Tertiary-Level) can be used to organize
different part of a content pane. JScrollPane has an addition scrolling feature.

Layout Manager - BorderLayout, FlowLayout, GridLayout,  

Below is an example of how swing is made:

import java.awt.*;
import javax.swing.*;

public class Test {
    public static void main(String[] args) {
        JFrame frm = new JFrame("Name of Floating Window");
        frm.setLayout(null);
        Container cp = frm.getContentPane();
        cp.setLayout(new BorderLayout()); // BorderLayout puts objects on N, E, S, W and CENTER
        JPanel p1 = new JPanel(new WrapLayout(FlowLayout.CENTER));

        JLabel lbl = new JLabel("This is a label");
        p1.add(lbl);

        JButton btn1 = new JButton("Press Doge", new ImageIcon(".\\doge.jpg"));
        p1.add(btn1);

        JTextField txt1 = new JTextField("Text", 10);
        p1.add(txt1);

        JTextField txt2 = new JPasswordField("Text", 10);
        p1.add(txt2);

        JCheckBox c1 = new JCheckBox("A"), c2 = new JCheckBox("B");
        p1.add(c1);
        p1.add(c2);

        JRadioButton r1 = new JRadioButton("a"), r2 = new JRadioButton("b");
        p1.add(r1);
        p1.add(r2);
        ButtonGroup bgroup1 = new ButtonGroup();
        bgroup1.add(r1);
        bgroup1.add(r2);

        String[] s = { " 1 ", " 2 ", " 3 " };
        JList<String> list = new JList<String>(s);
        list.setBorder(BorderFactory.createTitledBorder("N"));
        p1.add(list);

        JComboBox<String> combo = new JComboBox<String>(s);
        combo.addItem(" 4 ");
        combo.setBorder(BorderFactory.createTitledBorder("N"));
        p1.add(combo);

        JTextArea area = new JTextArea(10, 30);
        area.append("Comments:\n");
        p1.add(area);

        JMenuBar MBar = new JMenuBar();
        JMenu thefile = new JMenu("File");
        JMenuItem newf = new JMenuItem("New");
        JMenuItem open = new JMenuItem("Open");
        JMenuItem close = new JMenuItem("Close");
        JMenuItem quit = new JMenuItem("Exit");
        open.setMnemonic('O');
        thefile.add(newf);
        thefile.add(open);
        thefile.add(close);
        thefile.addSeparator();
        thefile.add(quit);
        MBar.add(thefile);
        frm.setJMenuBar(MBar);

        JInternalFrame internalFrame = new JInternalFrame("Internal Frame 1", true,
                true, true, true);
        internalFrame.setLocation(20, 400);
        internalFrame.setSize(200, 200);
        internalFrame.setVisible(true);
        Container icontentPane = internalFrame.getContentPane();
        JTextArea textArea = new JTextArea();
        JButton b = new JButton("Internal Frame Button");
        icontentPane.add(textArea, "Center");
        icontentPane.add(b, "South");
        // JDesktopPane desktopPane = new JDesktopPane();
        // desktopPane.add(internalFrame);
        // cp.add(desktopPane, BorderLayout.SOUTH);
        cp.add(internalFrame, BorderLayout.SOUTH);

        String[] heading = new String[] { "序號", "學號", "系所", "姓名" };
        String[][] data = new String[][] {
                { "1", "92610066", "資訊工程系", "王小明" },
                { "2", "92610067", "資訊工程系", "陳大氣" },
                { "3", "92660059", "企業管理系", "楊宗藩" },
                { "4", "92760101", "電子工程", "李明雄" }
        };

        JTable table = new JTable(data, heading);
        JScrollPane scrollPane2 = new JScrollPane(table);
        scrollPane2.setPreferredSize(new Dimension(1000, 300));
        // If JPanel is used instead of JScrollPane, the header will not be displayed
        cp.add(scrollPane2, BorderLayout.AFTER_LAST_LINE);

        JScrollPane scrollPane = new JScrollPane(p1, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setPreferredSize(new Dimension(1000, 300));
        cp.add(scrollPane);

        frm.setLocation(-6, 0);
        frm.setSize(1000, 700);
        frm.setVisible(true);
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
}

// WrapLayout source
// https://gist.github.com/jirkapenzes/4560255#file-wraplayout-java
class WrapLayout extends FlowLayout {
    // private Dimension preferredLayoutSize;

    public WrapLayout() {
        super();
    }

    public WrapLayout(int align) {
        super(align);
    }

    public WrapLayout(int align, int hgap, int vgap) {
        super(align, hgap, vgap);
    }

    @Override
    public Dimension preferredLayoutSize(Container target) {
        return layoutSize(target, true);
    }

    @Override
    public Dimension minimumLayoutSize(Container target) {
        Dimension minimum = layoutSize(target, false);
        minimum.width -= (getHgap() + 1);
        return minimum;
    }

    private Dimension layoutSize(Container target, boolean preferred) {
        synchronized (target.getTreeLock()) {
            int targetWidth = target.getSize().width;

            if (targetWidth == 0)
                targetWidth = Integer.MAX_VALUE;

            int hgap = getHgap();
            int vgap = getVgap();
            Insets insets = target.getInsets();
            int horizontalInsetsAndGap = insets.left + insets.right + (hgap * 2);
            int maxWidth = targetWidth - horizontalInsetsAndGap;

            Dimension dim = new Dimension(0, 0);
            int rowWidth = 0;
            int rowHeight = 0;

            int nmembers = target.getComponentCount();

            for (int i = 0; i < nmembers; i++) {
                Component m = target.getComponent(i);

                if (m.isVisible()) {
                    Dimension d = preferred ? m.getPreferredSize() : m.getMinimumSize();

                    if (rowWidth + d.width > maxWidth) {
                        addRow(dim, rowWidth, rowHeight);
                        rowWidth = 0;
                        rowHeight = 0;
                    }

                    if (rowWidth != 0) {
                        rowWidth += hgap;
                    }

                    rowWidth += d.width;
                    rowHeight = Math.max(rowHeight, d.height);
                }
            }

            addRow(dim, rowWidth, rowHeight);

            dim.width += horizontalInsetsAndGap;
            dim.height += insets.top + insets.bottom + vgap * 2;

            Container scrollPane = SwingUtilities.getAncestorOfClass(JScrollPane.class, target);
            if (scrollPane != null) {
                dim.width -= (hgap + 1);
            }

            return dim;
        }
    }

    private void addRow(Dimension dim, int rowWidth, int rowHeight) {
        dim.width = Math.max(dim.width, rowWidth);

        if (dim.height > 0) {
            dim.height += getVgap();
        }

        dim.height += rowHeight;
    }
}


21. Event Handling

When an defined event is triggered, the implementation of specific interface will create an object of the event type and the
event listener will handle the case when the event object is listened. Since the interface will be inplemented, we need to
define the abstract method explicitly. 

import java.awt.event.*;
public class xxxx implements ActionListener
{
  public void actionPerformed(ActionEvent e)
  {
    JOptionPane.showMessageDialog(null,"Message","Title",JOptionPane.WARNING_MESSAGE);
  }
}

There is few ways to do it
- extends JFrame and implements listener on the file class
- create a class either in the file class or outside of the file class and implement listener. Then create the class in
addActionListener. For example: btn.addActionListener(new Actlis())
- declare listener in addActionListener. For example btn.addActionListener(new ActionListener(){public void
actionPerformed(ActioneEvent e){ JOptionPane.showMessageDialog(...);}});

btn.addActionListener(frm); // btn is the source, frm is the listener which implements ActionListener
public void actionPerformed(ActioneEvent e){...} // override event handling
object e.getSource() // Get the source of event
object e.isSelected() // Check if the JRadioButton or the JCheckBox is checked

Below are the event types:

EventInterface(EventAdapter, this is the class version of interface), EventListener, EventMethod:

ActionEvent, ActionListener, actionPerformed(ActioneEvent e)
ItemEvent, ItemListener, itemStateChanged(ItemEvent e)
TextEvent, TextListener, textStateChanged(TextEvent e)
AdjustmentEvent, AdjustmentListener, adjustmentStateChanged(AdjustmentEvent e)
KeyEvent, KeyListener, key Typed/Pressed/Released (KeyEvent e)
MouseEvent, MouseListener, mouse Clicked/Entered/Exited/Pressed/Released/Dragged/Moved (MouseEvent e)
WindowEvent, WindowListener, window Activated/Closed/Closing/Deactivated/Deiconified/Iconified/Opened (WindowEvent e)

static class KeyLis implements KeyListener // For text
{
  public void keyPressed(KeyEvent e)
  {
    if(e.isActionKey())
      lab.setText("Action key is pressed\n");
    else lab.setText(Character.toString(e.getKeyChar())+" is pressed\n");
    //if(e.getKeyCode() == KeyEvent.VK_ENTER) //判斷是否按Enter鑑
  }
  public void keyReleased(KeyEvent e){}
  public void keyTyped(KeyEvent e){}
}

static class actLis implements ItemListener // For combobox
{
  public void itemStateChanged(ItemEvent e) {
     if (e.getStateChange()== ItemEvent.SELECTED)
         JOptionPane.showMessageDialog(null, Integer.toString(combo1.getSelectedIndex()) +     combo1.getSelectedItem());
  }
}

JColorChoser

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class Test {
    static JFrame frm = new JFrame("JColorChoser");
    static Container cp = frm.getContentPane();
    static JButton btn = new JButton("Get Color");
    static Color color;

    public static void main(String args[]) {
        cp.setLayout(new BorderLayout());
        cp.add(btn, BorderLayout.SOUTH);
        btn.addActionListener(new Actlis());
        cp.setBackground(Color.YELLOW);
        frm.setSize(200, 150);
        frm.setVisible(true);
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    static class Actlis implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            color = JColorChooser.showDialog(frm, "JColorChoser", Color.pink);
            cp.setBackground(color);
        }
    }
}

22. Java Archive (JAR)

Java archive is an archive to store java .class and other files to store in a same place for convinience of use.

To create a jar file:

1. Convert .java files to .class files by typing "javac *.java" in command prompt in the directory you're working.
2. Set path to the current directory by typing "path c:\%path%". This is not the actual path.
3. Make jar files by typing "jar cvfe C1.jar C1 *.class". C1 is the name of name class.
4. Test yout jar by typing "C1.jar"

jar cf C1.jar *.class // c: create; f: filename; *:all object of specific type in the current directory
jar cvf C1.jar a.class b.class c.gif // v:verbose(show the detail of generation)
jar cvfm C1.jar manifest.txt *.class // m:manifest name
jar cvfe C1.jar C1 *.class // e: name of main class

Manifest

Manifest-Version: 1.0
Create-By: 1.    //JDK Version
Class-Path: a.jar b.jar path/c.  //The currrent jar will refer to these jar
Main-Class: classname //The name of main method

Name: Login.class
SHA1-Digest:ki8EgpnOc70LQiiNsjbKwoU6Pxg=　//Electronic Signature

How to pack JDBC into jar file

1. Download and decompress the JDBC Driver, move the specific jar file to the correct directory.
2. Edit the manifest file by adding all of the jar file and make sure Main-Class is correct.
Example:

Class-Path: mysql-connector-java-5.0.5-bin.jar
Main-Class: C1
3. Pack the manifest, class, and any other files into single jar. 

I) Using Access Database

Class.forName("net.ucanaccess.jdbc.UcanaccessDriver"); // Load the JDBC driver
Connection con = DriverManager.getConnection("jdbc:ucanaccess://c:/java/db2.mdb");// Connect to the databse
// Alternative
DriverManager.registerDriver (new net.ucanaccess.jdbc.UcanaccessDriver());   
Connection con = DriverManager.getConnection("jdbc:ucanaccess://c:/java/db2.mdb");// Connect to the databse

II) Using MySQL Database

Class.forName("com.mysql.jdbc.Driver"); // Load the JDBC driver
// Connect to the databse
Connection con=DriverManager.getConnection("jdbc:mysql://host:port/db","account","password");
or
Connection con=DriverManager.getConnection("jdbc:mysql://host:port/db?user=account&password=password");
// In Case of using UNICODE
jdbc:mysql://localhost/school?user=root&password=123&useUnicode=true&characterEncoding=Big5

III) Using Oracle Database

Class.forName("oracle.jdbc.driver.OracleDriver"); // Load the JDBC driver
Connection con = DriverManager.getConnection ("jdbc:oracle:thin:account/password@host:port:db");// Connect to the databse

23. Using SQL

Statement stmt=con.createStatement(); // Create Statement object
ResultSet rs=stmt.executeQuery("select * from table1");
int cnt=stmt.executeUpdate("insert into table1 values('xxx','xxx')"); // inser,、update, delete must use executeUpdate method

Implementation:

The jar file must have a manifest to set the main class and include all JDBC related jar files as the Class-Path. Then, the
query can be executed from the jar file that are created at the end.

import java.sql.*;

public class Jdbc_access_1
{
  public static void main(String[] args)
  {
    try
    {       
      Class.forName("net.ucanaccess.jdbc.UcanaccessDriver"); // Load the JDBC driver
      Connection con = DriverManager.getConnection("jdbc:ucanaccess://c:/java/db1.mdb");//Connect to the databse      
      Statement stmt = con.createStatement();
      ResultSet rs = stmt.executeQuery("select * from students");       
      while(rs.next())
      {
        String stud_no=rs.getString(1);
        String stud_name=rs.getString(2);
        String stud_sex=rs.getString("stud_sex");
        String stud_addr=rs.getString("stud_addr");
        System.out.println(stud_no+","+stud_name+","+stud_sex+","+stud_addr);
      }
      con.close();
    }
    catch(ClassNotFoundException e)
    {
      System.out.println("Can't find JDBC driver");
      e.printStackTrace();
    }
    catch(SQLException e)
    {
      e.printStackTrace();
    }
  }
}

Classes for SQL

Statement st; // To execute SQL commands
ResultSet rs; // Used to collect data from database

Every set has n column. rs.getString(i) gets the ith column of the current set.
rs.next(), rs.previous(), re.first(), re.last(), re.beforeFirst(), re.afterLast()
If we want to use other method than next(), we need to add the statement:
stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);

rs.absolute(n); // Move to the nth data in the set, if n<0 move to the final nth data
rs.relative(n); // Move like above but in a relative way
rs.deleteRow(); rs.updateRow(); rs.updateString("col_name","str");

To execute same SQL statement repeatly, use this

String sqlstr="insert into students (stud_no,stud_name,stud_sex,stud_addr) values (?,?,?,?)";
      PreparedStatement pstmt=con.prepareStatement(sqlstr);
      pstmt.setInt(1,960001);
      pstmt.setString(2,"王小明");
      pstmt.setInt(3,"M");
      pstmt.setString(4,"彰化縣");
      pstmt.executeUpdate();

To execute multiple SQL statement at once, use addBatch() and executeBatch()

Statement stmt=con.createStatement();
      stmt.addBatch("insert into students (stud_no,stud_name) values ('960002','王小明')");
      stmt.addBatch("update students set stud_addr='台東' where stud_no='960004' ");
      stmt.executeBatch();

To combine the previous two:

String sqlstr="insert into students (stud_no,stud_name) values (?,?)";
      PreparedStatement pstmt = con.prepareStatement(sqlstr);
      pstmt.setString(1,"960001");
      pstmt.setString(2, "王小明");
      pstmt.addBatch();
      pstmt.setString(1,"960002");
      pstmt.setString(2, "陳大器");
      pstmt.addBatch();
      pstmt.executeBatch();

ResultSetMetaData rsmd  = rs.getMetaData(); // Meta data is the data of column itself, but not any row
rsmd.getColumnCount(), rsmd.getColumnName(i), rsmd.getColumnDisplaySize(i)

JTable
DefaultTableModel tableModel = new DefaultTableModel();
tableModel.addColumn("str");
JTable jTable1 = new JTable();   
jTable1.setModel(tableModel);
jTable1.setFont(new Font("Dialog", 0, 13));
tableModel.addRow(rowData);// rowData is type of String[] 

SQL Syntax

SELECT - extracts data from a database
UPDATE - updates data in a database
UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

DELETE - deletes data from a database
DELETE FROM table_name WHERE condition;

INSERT INTO - inserts new data into a database

insert into table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);
insert into table_name VALUES (value1, value2, value3, ...);

CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index
SELECT DISTINCT - used to return only distinct values

select A from B; // We can think of B is primaty set of data in the mdb file.
select column1, column2, ... FROM table_name;
select * from table_name where condition; // condition example: Country = 'Malaysia', Year = 1957

Operator	Description	Example
=	        Equal	
>	        Greater than	
<	        Less than	
>=	        Greater than or equal	
<=	        Less than or equal	
<>	        Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	    Between a certain range	
LIKE	    Search for a pattern	
IN	        To specify multiple possible values for a column
AND
OR
NOT

ORDER BY - SELECT * FROM A ORDER BY ... ASC|DESC; // col1 ASC, col2 DESC (col3 ascending, col4 descending)



