1. Introduction to C#

.NET framework is commonly used to develop a software. .NET framework support multiple language such as visual C++, visual C#,
visual basic, python, etc. .NET will compile the source code into CIL(Compiled Intermediate Language) which acts like bytecode
in java. The CIL can be run on virtual machine CLR(Common Language Runtime) on different platform. C#(C Sharp) is a languge
degsigned to build software with window interface.

Basic Tips of C#:

- Default interger will be in int type of 4 byte and default floating number will be in double of 8 byte. To specify specific
data use the postfix 'f' for float or 'l' for long integer.
- String can by concatenated using the operator '+'. For example: "str" + 2 + '3' = "str23", "" + (23 + 4) + 3 = "273"
- Convert.ToInt32(str) // convert string str into integer of 32-bit (4 byte)

Below is an example code of a simple window:

using System;
using System.ComponentModel;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        private void button1_Click(object sender, EventArgs e)
        {
            Form2 f = new Form2();
            f.preForm = this;
            f.Show();
            this.Hide();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        public Form1 preForm;
        private void button1_Click(object sender, EventArgs e)
        {
            Form3 f = new Form3();
            f.preForm = this;
            f.Show();
            this.Hide();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.preForm.Show();
            this.Close();
        }
    }
}

- After an execution is done, we can use MessageBox to display errors mesage or execution result message. The syntax is
MessageBox.Show(message, title, buttonlabel, message icon). For example:
MessageBox.Show("An error occurred", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

MessageBoxButtons Constants:
MessageBoxButtons.AbortRetryIgnore
MessageBoxButtons.OK
MessageBoxButtons.OKCancel
MessageBoxButtons.RetryCancel
MessageBoxButtons.YesNo
MessageBoxButtons.YesNoCancel

MessageBoxIcon Constants:
MessageBoxIcon.Information, MessageBoxIcon.Asterisk "letter 'i' in blue circle"
MessageBoxIcon.Error, MessageBoxIcon.Stop           "letter 'x' in red circle"
MessageBoxIcon.Warning, MessageBoxIcon.Exclamation  "letter '!' in yellow triangle"
MessageBoxIcon.Question                             "letter '?' in blue circle"
MessageBoxIcon.None

MessageBox.Show() will return a data of DialogResult contant. DialogResult.Yes or DialogResult.No.

- Exception in C# is similar with C++ and Java. Here's an example:

private void button_Click(object sender, EventArgs e)
{
    try
    {
        int num1 = Convert.ToInt32(textBox1.Text);
        if (num1 < 0) throw new Exception("num1 cannot be negative number");
        int num2 = Convert.ToInt32(textBox2.Text);
        if (num2 < 0) throw new Exception("num2 cannot be negative number");
        textBox3.Text = num1 + " / " + num2 + " = " + (num1 / num2);
    }
    catch (Exception ex)
    {
        MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        textBox3.Text = "";
    }
}

- String Operations:

== and != can be used to compare the strings.
String.Compare(s1, s2)  // returns 0 if s1 == s2, return > 0 if s1 > s2 ( a < aa < b < bz < z )
s1.Insert(i, s2)        // insert s2 between index i - 1 and i in s1
s1.Remove(i, n)         // remove n characters staring at index i
s1.Split(ch)            // seperate the string into array of string by the character ch. Default: seperate by space
s1.Length               // returns the length of array or string
int[,] arr              // declare a 2-dimensional array

- IO (must include using System.IO)

To create a StreamReader object:

FileInfo f = new FileInfo("directory + filename");
StreamReader sr = f.OpenText();
// or
StreamReader sr = new StreamReader ("directory + filename");

sr.Read();  // read a ASCII character, returns -1 at end
sr.Peek();  // look for the next character, but does not read it, returns -1 at end
char c = (char) sr.Read();
string s = sr.ReadLine();
string s2 = sr.ReadToEnd();
sr.Close();

To create a StreamWriter object:

FileInfo f = new FileInfo("directory + filename");
StreamWriter sw = f.CreateText();
// or
StreamWriter sw = new StreamWriter ("directory + filename");
sw.Write(str); 
sw.WriteLine(str);
sw.Flush();
sw.Close();

OpenFileDialog and SaveFileDialog

If we can open the file system to choose the file we want to use, it will be more convinient. The class OpenFileDialog is used
to open file systems. The SaveFileDialog is similar.

private System.Windows.Forms.OpenFileDialog openFileDialog1;
this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();

openFileDialog1.Filter = "Textfilename(*.txt)|*.txt" // message after | will filter the file by the extension on the directory
if( openFileDialog1.ShowDialog() == DialogResult.OK ) // DialogResult.OK means the user have choose a file
{
FileInfo f = new FileInfo( openFileDialog1.FileName );
StreamReader sr = f.OpenText();
...
}

C# use FileStream to work with binary files

FileStream fs = new FileStream(" directory + filename ", FileMode.modeconstant);
FileMode.availablemodeconstant
FileMode.Open
FileMode.Create // replace the existing file if it exist, else create a new file
FileMode.Append // If there is no existing file, then create a new one
FileMode.OpenOrCreate 
BinaryReader, BinaryWriter, FileDialog filter:"binaryfilename(*.dat) | *.dat"

BinaryReader

FileStream fs = new FileStream(" directory + filename ", FileMode.Open);
BinaryReader br = new BinaryReader(fs);
string s = br.ReadString();
char ch = br.ReadChar();
int n = br.ReadInt32();
double d = br.ReadDouble();
bool b = br.ReadBoolean();
br.PeekChar()
br.Close();

BinaryWriter

FileStream fs = new FileStream(" directory + filename ", FileMode.Create);
BinaryWriter bw = new BinaryWriter(fs);
bw.Write(data);
bw.Flush();
bw.Close();

- Reference: add prefix "ref" that acts as "&" in C++. 

- Call by output: add prefix "out" that returns the final value of the argument to it's variable. For example

void MaxMinArray(int[] a, out int max, out int min)
{
    max = a[0]; min = a[0];
    for (int i = 1; i < a.Length; i++)
    {
        if( a[ i ] > max ) max = a[ i ];
        if( a[ i ] < min ) min = a[ i ];
    }
}
private void button1_Click(object sender, EventArgs e)
{
    int[] s = new int[5];
    s[0] = Convert.ToInt32( textBox1.Text );
    …
    s[4] = Convert.ToInt32( textBox5.Text );
    int max, min;
    MaxMinArray(s, out max, out min);
    textBox6.Text = "" + max + min;
}

- Class Specifier

private < internal , protected < public
Default: internal, private

Specifier                       private     internal    protected   public
The same class                  O           O           O           O
same namespace same subclass    X           O           O           O
same namespace but not subclass X           O           X           O
subclass of different namespace X           X           O           O
diff namespace and not subclass X           X           X           O

A member's specifier cannot be greater than it's own class. Subclass's specifier cannot be greater than it's baseclass.

- ShowDialog vs Show

Form f = new Form();
f.show();
...// The code run

Form f = new Form();
f.ShowDialog();
...// The code only runs when the window of Form f is closed


- DialogResult may have these values: None, OK, Cancel, Abort, Retry, Ignore, Yes, No
- To override a function that have the same argument and return type, use "new" to override. Syntax: public new func();
- A method declared with "virtual" cannot be used by it's derived class.
- Abstract class cannot have an instance and abstract method cannot have definition. They are both declared with "abstract"
- If a method of a parent have "virtual" or "abstract", the overrided method must have "override" on it's declaration

- Collection, similar as java and C++: List<Object> = new List<Object>();


Shortcut:

Formatting - crtl + k， ctrl + f
Select next text - shift + alt + .
Select all text - shift + alt + ;