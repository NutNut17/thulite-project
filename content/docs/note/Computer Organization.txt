Chapter 1:

Relative Performance: PerformanceX / PerformanceY = ExecutionTimeX / ExecutionTimeY = n // X is n time faster than y
Cpu Time = CPU Clock Cycles * Clock Cycle Time
Clock Cycles = Instruction Count * Cycles per Instruction
Power = Capacitive Load * Voltage ^ 2 * Frequency
Cost per Die = Cost per Wafer / ( Dies per Wafer * Yield )
CPU Benchmark = Geometric Mean of Performance Ratio

Chapter 2: Intructions (MIPS Code)

add dest, operand1, operand2    // addition
sub dest, operand1, operand2    // subtraction operand1 - operand2
lw dest, offset(source)         // load word offset(source base address) to dest, offset must be multiple of 4
lb dest, offset(source)         // load byte offset(source base address) to dest, and extend the size from 8-bit to 32-bit
lh dest, offset(source)         // load half-word offset(source base address) to dest, and extend the size from 16-bit to 32-bit
sw source, offset(dest)         // store word source to offset(dest base address), offset must be multiple of 4
sb source, offset(dest)         // Store just rightmost byte
sb source, offset(dest)         // Store just rightmost half-word
addi dest, operand1, constant;  // immediate addition
sll                             // shift left
srl                             // shift right
and, andi                       // bitwise AND，and for two register, andi for a register and constant
or, ori                         // bitwise OR, or for two register, ori for a register and constant
nor                             // bitwise NOT
beq operand1, operand2, label   // goto label if operand1 = operand2
bne operand1, operand2, label   // goto label if operand1 != operand2
j label                         // jump to label, op(6-bit) | address(26-bit), address * 4 = memory address
jal label                       // jump to label and save the address of following instruction in $ra
slt dest, operand1, operand2    // if operand1 < operand2 dest = 1 else dest = 0
slti dest, operand, constant    // immediate set lower than
sltu, sltui                     // unsigned set comparison
blt operand1, operand2, label   // slt $at, operand1, operand2 -> bne $at, $zero, label
move dest, source               // add dest, $zero, source
jr $ra                          // jumps to $ra
lui dest, constant              // copies 16-bit constant to left 16 bits of dest, clear right 16-bit of dest to 0
ll dest, offset(source base address)    // load linked
sc source, offset(dest base address)    // store conditional, returns 1 in dest of location not changed since the previous ll 
move $s0, $zero                 // Copies a value from one register to another
li $s0, 0                       // Loads a specific numeric value to a register


register operands: 32-bit "word"
immediate operands avoid load operation
$zero: constant 0
MIPS encode as 32-bit instruction word
MIPS R-format Instruction: op, operation code(6-bit) | rs, first source register(5-bit) | rt, second source register(5-bit) |
rd, destination register(5-bit) | shamt, shift amount(5-bit) | funct, function code(6-bit)
MIPS I-format Instruction: op(6-bit) | rs(5-bit) | rt, destination or source register(5-bit) | constant or address(16-bit)

Register Usage:

$a0 – $a3: arguments (reg's 4 – 7)
$v0, $v1: result values (reg's 2 and 3)
$t0 – $t9: temporaries  // Can be overwritten by callee
$s0 – $s7: saved        // Must be saved/restored by callee
$gp: global pointer for static data (reg 28)
$sp: stack pointer (reg 29)
$fp: frame pointer (reg 30)
$ra: return address (reg 31)

Example 1:

int fact (int n)
{
    if (n < 1)
        return 1;
    else
        return n * fact(n - 1);
}
// Argument in $a0, Result in $v0
fact:
    addi $sp, $sp, -8     # adjust stack for 2 items
    sw   $ra, 4($sp)      # save return address
    sw   $a0, 0($sp)      # save argument
    slti $t0, $a0, 1      # test for n < 1
    beq  $t0, $zero, L1
    addi $v0, $zero, 1    # if so, result is 1
    addi $sp, $sp, 8      #   pop 2 items from stack
    jr   $ra              #   and return
L1: addi $a0, $a0, -1     # else decrement n  
    jal  fact             # recursive call
    lw   $a0, 0($sp)      # restore original n
    lw   $ra, 4($sp)      #   and return address
    addi $sp, $sp, 8      # pop 2 items from stack
    mul  $v0, $a0, $v0    # multiply to get result
    jr   $ra              # and return

Example 2:

void strcpy (char x[], char y[])
{ int i;
  i = 0;
  while ((x[i]=y[i])!='\0')
    i += 1;
}
// Address of x, y, i in $a0, $a1, $s0
strcpy:
    addi $sp, $sp, -4      # adjust stack for 1 item
    sw   $s0, 0($sp)       # save $s0
    add  $s0, $zero, $zero # i = 0
L1: add  $t1, $s0, $a1     # addr of y[i] in $t1
    lbu  $t2, 0($t1)       # $t2 = y[i]
    add  $t3, $s0, $a0     # addr of x[i] in $t3
    sb   $t2, 0($t3)       # x[i] = y[i]
    beq  $t2, $zero, L2    # exit loop if y[i] == 0  
    addi $s0, $s0, 1       # i = i + 1
    j    L1                # next iteration of loop
L2: lw   $s0, 0($sp)       # restore saved $s0
    addi $sp, $sp, 4       # pop 1 item from stack
    jr   $ra               # and return

Example 3:

void sort (int v[], int n)
	{
	  int i, j;
	  for (i = 0; i < n; i += 1) {
	    for (j = i – 1; j >= 0 && v[j] > v[j + 1]; j -= 1) {
	      swap(v,j);
	    }
	  }
	}
// v in $a0, n in $a1, i in $s0, j in $s1
sort:    addi $sp,$sp, –20      # make room on stack for 5 registers
         sw $ra, 16($sp)        # save $ra on stack
         sw $s3,12($sp)         # save $s3 on stack
         sw $s2, 8($sp)         # save $s2 on stack
         sw $s1, 4($sp)         # save $s1 on stack
         sw $s0, 0($sp)         # save $s0 on stack

         move $s2, $a0           # save $a0 into $s2
         move $s3, $a1           # save $a1 into $s3
         move $s0, $zero         # i = 0
for1tst: slt  $t0, $s0, $s3      # $t0 = 0 if $s0 ≥ $s3 (i ≥ n)
         beq  $t0, $zero, exit1  # go to exit1 if $s0 ≥ $s3 (i ≥ n)
         addi $s1, $s0, –1       # j = i – 1
for2tst: slti $t0, $s1, 0        # $t0 = 1 if $s1 < 0 (j < 0)
         bne  $t0, $zero, exit2  # go to exit2 if $s1 < 0 (j < 0)
         sll  $t1, $s1, 2        # $t1 = j * 4
         add  $t2, $s2, $t1      # $t2 = v + (j * 4)
         lw   $t3, 0($t2)        # $t3 = v[j]
         lw   $t4, 4($t2)        # $t4 = v[j + 1]
         slt  $t0, $t4, $t3      # $t0 = 0 if $t4 ≥ $t3
         beq  $t0, $zero, exit2  # go to exit2 if $t4 ≥ $t3
         move $a0, $s2           # 1st param of swap is v (old $a0)
         move $a1, $s1           # 2nd param of swap is j
         jal  swap               # call swap procedure
         addi $s1, $s1, –1       # j –= 1
         j    for2tst            # jump to test of inner loop
exit2:   addi $s0, $s0, 1        # i += 1
         j    for1tst            # jump to test of outer loop
exit1:   lw $s0, 0($sp)  # restore $s0 from stack
         lw $s1, 4($sp)         # restore $s1 from stack
         lw $s2, 8($sp)         # restore $s2 from stack
         lw $s3,12($sp)         # restore $s3 from stack
         lw $ra,16($sp)         # restore $ra from stack
         addi $sp,$sp, 20       # restore stack pointer
         jr $ra                 # return to calling routine

Chapter 3: Arithmetic for Computers

MIPS Multiplication

Two Register for multiplication: HI - most-significant 32-bit, LO - least-significant 32-bit

mult rs, rt / multu rs, rt // 64-bit product in HI/LO. If the product overflows 32 bit, HI will have value
mfhi rd / mflo rd   // Move from HI/LO to rd
mul td, rs, rt      // least-significant 32 bits of product -> rd

MIPS Divition

Two register for nultiplication: HI - 32-bit remainder, LO: 32-bit quotient
div rs, rt / divu rs, rt
mghi / mflo         // access result

Floating Point

Standard Representation: 1. (-1) ^ (s) * xxxx(base 2) * 2 ^ (yyyy). s: sign, x: Fraction, y: actual exponent - bias
Precision (single/double): Exponent (8 bit/ 11 bit), Fraction (23 bit/ 52 bit)
Bias (single/double): 127/ 1023

- Exponent 000...000 and 111...111 are reserved for 1.0 and 2.0
- Relative precision: 2^m = 10^n => n = m * log10(2)
- Denormal Number: Exponent = 000...000, hidden bit change from 1.xxxx to 0.xxxx. Used for very small number or zero
- Infinites: Exponent = 111...111, Fraction = 111...111
- Not-a-Number(NaN): Exponent = 111...111, Fraction != 111...111, used for undefined number

Example: 1 10000001 01000…00
S = 1, Fraction = 01000…00, Exponent = 100000012 = 129
x = (–1) ^ 1 × (1 + 0.012) × 2 ^ (129 – 127)
  = –1 × 1.25 × 22
  = –5.0

Floating Number Addition Steps:

1. Align decimal points - Shift number with smaller exponent
2. Add significands
3. Normalize result & check for over/underflow
4. Round and renormalize if necessary

Floating Number Multiplication Steps:

1. Add exponents. For biased exponents, subtract bias from sum
2. Multiply significands
3. Normalize result & check for over/underflow
4. Round and renormalize if necessary
5. Determine sign of result from signs of operands

lwc1, ldc1, swc1, sdc1: FP load and store instructions, ldc1 $f8, 32($sp)
add.s, sub.s, mul.s, div.s: Single-precision arithmetic, add.s $f0, $f1, $f6
add.d, sub.d, mul.d, div.d: Double-precision arithmetic, mul.d $f4, $f4, $f6
c.xx.s, c.xx.d (xx is eq, lt, le, …): Single- and double-precision comparison
c.lt.s $f3, $f4: Sets or clears FP condition-code bit by looking at the result of $f3 < $f4
bc1t, bc1f: Branch on FP condition code true or false, bc1t TargetLabel

C code:
	float f2c (float fahr) {
          return ((5.0/9.0)*(fahr - 32.0));
    }
fahr in $f12, result in $f0, literals in global memory space
Compiled MIPS code:
	f2c: lwc1  $f16, const5($gp)
         lwc1  $f18, const9($gp)
         div.s $f16, $f16, $f18
         lwc1  $f18, const32($gp)
         sub.s $f18, $f12, $f18
         mul.s $f0,  $f16, $f18
         jr    $ra

C code:
	void mm (double x[][],
             double y[][], double z[][]) {
          int i, j, k;
      for (i = 0; i! = 32; i = i + 1)
        for (j = 0; j! = 32; j = j + 1)
          for (k = 0; k! = 32; k = k + 1)
            x[i][j] = x[i][j]
                      + y[i][k] * z[k][j];
    }
Addresses of x, y, z in $a0, $a1, $a2, and
i, j, k in $s0, $s1, $s2

MIPS code:
        li   $t1, 32       # $t1 = 32 (row size/loop end)
        li   $s0, 0        # i = 0; initialize 1st for loop
    L1: li   $s1, 0        # j = 0; restart 2nd for loop
    L2: li   $s2, 0        # k = 0; restart 3rd for loop
        sll  $t2, $s0, 5   # $t2 = i * 32 (size of row of x)
        addu $t2, $t2, $s1 # $t2 = i * size(row) + j
        sll  $t2, $t2, 3   # $t2 = byte offset of [i][j]
        addu $t2, $a0, $t2 # $t2 = byte address of x[i][j]
        l.d  $f4, 0($t2)   # $f4 = 8 bytes of x[i][j]
    L3: sll  $t0, $s2, 5   # $t0 = k * 32 (size of row of z)
        addu $t0, $t0, $s1 # $t0 = k * size(row) + j
        sll  $t0, $t0, 3   # $t0 = byte offset of [k][j]
        addu $t0, $a2, $t0 # $t0 = byte address of z[k][j]
        l.d  $f16, 0($t0)  # $f16 = 8 bytes of z[k][j]
    sll  $t0, $s0, 5       # $t0 = i*32 (size of row of y)
        addu  $t0, $t0, $s2    # $t0 = i*size(row) + k
        sll   $t0, $t0, 3      # $t0 = byte offset of [i][k]
        addu  $t0, $a1, $t0    # $t0 = byte address of y[i][k]
        l.d   $f18, 0($t0)     # $f18 = 8 bytes of y[i][k]
        mul.d $f16, $f18, $f16 # $f16 = y[i][k] * z[k][j]
        add.d $f4, $f4, $f16   # f4=x[i][j] + y[i][k]*z[k][j]
        addiu $s2, $s2, 1      # $k k + 1
        bne   $s2, $t1, L3     # if (k != 32) go to L3
        s.d   $f4, 0($t2)      # x[i][j] = $f4
        addiu $s1, $s1, 1      # $j = j + 1
        bne   $s1, $t1, L2     # if (j != 32) go to L2
        addiu $s0, $s0, 1      # $i = i + 1
        bne   $s0, $t1, L1     # if (i != 32) go to L1

Chapter 4: The Processsor

Types of instructions of ISA:

Memory reference: lw, sw
Arithmetic/logical: add, sub, and, or, slt
Control transfer: beq, j

Procedure of flow:

Instruction memory -> register file -> ALU -> data memory -> register file

1. Instruction Fetch: The program reads the code at specific line of assembly language, and run the instruction then adds the
program counter to read the next line of program.

2. R-Format Instructions: Reads value from register and perform ALU operation, then writes the result back to register.

3. Load/Store Instructions: Read regiser operands and calculate address of memory.

4. Branch Instructions: Read register operands and compare operands, use ALU subtract then set the zero output. Then calculate
the target address by doing sign displacement and left shift, then adds to PC + 4 (Second PC adder).

5. Jump: Update PC with concatenation of top 4 bits of old PC
ALU Control

0000 - AND
0001 - OR
0010 - add
0110 - subtract
0111 - set on less than
1100 - NOR

ALUop

00 - lw
01 - sw
10 - beq
11 - r-type

funct

XXXXXX - lw, sw, beq
100000 - add
100010 - subtract
100100 - AND
100101 - OR
101010 - set on less than

R-Type      0[31:26], rs[25:21], rt[20:16], rd[15:11], shamt[10:6], funct[5:0]
Load/Store  35or43[31:26], rs[25:21], rt[20:16], address[15:0]
Branch      4[31:26], rs[25:21], rt[20:16], address[15:0]
Jump        2[31:26], address[25:0]

[31:26] - opcode
[25:21] - always read
[20:16] - read, except for load

MIPS Pipeline 

IF: Instruction fetch from memory
ID: Instruction decode & register read
EX: Execute operation or calculate address
MEM: Access memory operand
WB: Write result back to register

Hazards

Situations that prevent starting the next instruction in the next cycle

Structure hazards - A required resource is busy
Data hazard - Need to wait for previous instruction to complete its data read/write
Control hazard - Deciding on control action depends on previous instruction